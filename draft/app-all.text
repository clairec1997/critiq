from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify
                   )
import dbi
from werkzeug import secure_filename
import sys,os,random

import lookup
import bleach
import bcrypt

UPLOAD_FOLDER = '/uploaded/'
ALLOWED_EXTENSIONS = {'txt', 'png', 'jpg', 'jpeg', 'gif'}

# CONN = 'sbussey_db'
# CONN = 'ccannatt_db'
CONN = 'spulavar_db'

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

@app.route('/', methods=["GET", "POST"])
def index():

    if request.method == "POST":
        kind = request.form.get('search_kind')
        term = (request.form.get('select_tag') if kind == "tag" 
                else request.form.get('search_term'))

        return redirect(url_for('worksByTerm', search_kind=kind, search_term=term))    
    else:
        if 'username' in session:
            return redirect( url_for('recommendations'))
        else:
            return render_template('main.html',title='Hello')

@app.route('/getTags/', methods=["POST"])
def getTags():
    conn = lookup.getConn(CONN)
    tags = lookup.getTagsAjax(conn)

    return jsonify( {'error': False, 'tags': tags} )

@app.route('/join/', methods=["POST"])
def join():
    try:
        username = request.form['username']
        passwd1 = request.form['password1']
        passwd2 = request.form['password2']
        if passwd1 != passwd2:
            flash('passwords do not match')
            return redirect( url_for('index'))
        hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
        hashed_str = hashed.decode('utf-8')

        conn = lookup.getConn(CONN)
        try:
            lookup.insertPass(conn, username, hashed_str)
        except Exception as err: # this is not getting thrown
            flash('That username is taken.')#: {}'.format(repr(err)))
            return redirect(url_for('index'))
        uid = lookup.getUIDFirst(conn)
        # print(uid)
        flash('FYI, you were issued UID {}'.format(uid))
        session['username'] = username
        session['uid'] = uid
        session['logged_in'] = True
        # session['visits'] = 1
        return redirect( url_for('profile', uid=uid) ) #should put username in instead? more readable
    except Exception as err:
        flash('form submission error '+str(err))
        return redirect( url_for('index') )

@app.route('/login/', methods=["POST"])
def login():
    try:
        username = request.form['username']
        passwd = request.form['password']
        conn = lookup.getConn(CONN)
        row = lookup.getLogin(conn, username)
        if row is None:
            # Same response as wrong password,
            # so no information about what went wrong
            flash('login incorrect. Try again or join')
            return redirect( url_for('index'))
        hashed = row['passhash'] 
        
        hashed2 = bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8'))#.encode('utf-8'))
        hashed2_str = hashed2.decode('utf-8')
        
        if hashed2_str == hashed:
            flash('successfully logged in as '+username)
            session['username'] = username
            session['uid'] = row['uid']
            print(session['uid'])
            session['logged_in'] = True
            # session['visits'] = 1
            return redirect( url_for('profile', uid=session['uid']) )
        else:
            flash('login incorrect. Try again or join')
            return redirect( url_for('index'))
    except Exception as err:
        flash('form submission error: '+str(err))
        return redirect( url_for('index') )


@app.route('/profile/<uid>') #allow everyone to access all profiles, but only if logged in can change data
def profile(uid):
    try:
        # don't trust the URL; it's only there for decoration
        if 'username' in session:
            username = session['username']
            # uid = session['uid']
            # session['visits'] = 1+int(session['visits'])
            return render_template('profile.html',
                                   page_title="{}'s Profile".format(username),
                                   username=username
                                   )

        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('index') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('index') )

@app.route('/manage/')
def manage():
    try:
        if 'uid' in session:
            uid = session['uid']
            conn = lookup.getConn(CONN)
            stories = lookup.getStories(conn, uid)
            return render_template('manage.html', title="Hello", stories=stories)
        else: 
            flash("Please log in or join")
            return redirect(url_for('index'))
    except Exception as err:
        flash('error: '+str(err))
        return redirect( url_for('index') )
    
@app.route('/add/', methods=["GET", "POST"])
def add():
    try:
        if request.method == "GET":
            if 'uid' in session:
                uid = session['uid']
                conn = lookup.getConn(CONN)
                genre = lookup.getTags(conn, 'genre')
                warnings = lookup.getTags(conn, 'warnings')
                audience = lookup.getTags(conn, 'audience')
                isFin = lookup.getTags(conn, 'isFin')
                return render_template('add.html',title='Add Story', warnings=warnings, 
                                    genre=genre, audience=audience, isFin=isFin)
            else:
                flash("Please log in or join")
                return redirect(url_for('index'))
                
        if request.method == "POST":
            uid = session['uid']
            title = request.form['title']
            summary = request.form['summary']
            genre = request.form.getlist('genre')
            audience = request.form['audience']
            warnings = request.form.getlist('warnings')
            status = request.form['isFin']
        
            conn = lookup.getConn(CONN)
            sid = lookup.addStory(conn, uid, title, summary)
            lookup.addTags(conn, sid, genre, warnings, audience, status)

            return redirect(url_for('update', sid=sid))
    except Exception as err:
        flash('error: '+str(err))
        return redirect( url_for('index') )

@app.route('/update/<int:sid>/', defaults={'cnum':1}, methods=["GET","POST"])
@app.route('/update/<int:sid>/<int:cnum>/', methods=["GET","POST"])
def update(sid, cnum):
    try:
        conn = lookup.getConn(CONN)
        authorid = lookup.getAuthorId(conn,sid)[0]
        print(authorid, session['uid'])

        if 'uid' in session and session['uid']==authorid:
            if request.method=="GET":
                chapter = lookup.getChapter(conn, sid, cnum)
                story = ""
                if chapter:
                    infile = open(chapter['filename'], 'r')
                    story = infile.read()
                    infile.close()
                allch = lookup.getChapters(conn, sid)
                return render_template('write.html', title='Update Story',
                                sid=sid, cnum=cnum, story=story, allch=allch)

            if request.method=="POST":
                ctitle = request.form['title']
                sometext = request.form['write']
                somehtml = bleach.clean(sometext, #allowed tags, attributes, and styles
                    tags=['b','blockquote','i','em','strong','p','ul','br','li','ol','span'], 
                    attributes=['style'],
                    styles=['text-decoration', 'text-align'])

                dirname = os.path.dirname(__file__)
                relative = 'uploaded/'+'sid'+str(sid)+'cnum'+str(cnum)+'.html'
                filename = os.path.join(dirname, relative)

                outfile = open(filename, 'w')
                outfile.write(somehtml)
                outfile.close()
                
                chapter = lookup.getChapter(conn,sid,cnum)

                if not chapter:
                    lookup.setChapter(conn, sid, cnum, filename)

                return redirect(url_for('read', sid=sid, cnum=cnum))
        else: 
            flash('''You are not authorized to edit this work. 
                    Please log in with the account associated with this work''')
            return redirect(url_for('index'))
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('index') )

@app.route('/read/<int:sid>', defaults={'cnum': 1})
@app.route('/read/<int:sid>/<int:cnum>/')
def read(sid, cnum): 
    conn = lookup.getConn(CONN)
    chapter = lookup.getChapter(conn, sid, cnum)

    infile = open(chapter['filename'], 'r')
    story = infile.read()
    infile.close()

    allch = lookup.getChapters(conn,sid)
    
    work = lookup.getStory(conn, sid)

    if 'username' not in session:
        return redirect(url_for('index'))
    if session['username'] == work['username']:
        return render_template('read.html', 
                            title="Hello", 
                            story=story,
                            author=work['username'],
                            cnum=cnum,
                            sid=sid,
                            update=True,
                            allch=allch)
    else:
        return render_template('read.html', 
                            title="Hello", 
                            story=story,
                            author=author['username'],
                            cnum=cnum,
                            sid=sid,
                            update=False,
                            allch=allch)

@app.route('/bookmarks/')
def bookmarks():
    return render_template('main.html',title='Hello')

@app.route('/recommendations/')
def recommendations():
    recommendation = [
                        {'title': '', 
                            'sid': 0,
                            'summary': '',
                            'tags': [],
                            'rating': 0}
                       ]    
    return render_template('recommendations.html',
                            recommendations=recommendation)

@app.route('/addComment/', methods=["POST"])
def addComment():
    conn = lookup.getConn(CONN)
    commentText = request.form.get("commentText")
    # print(commentText)
    cid = request.form.get('cid')
    cnum = request.form.get('cnum')
    sid = request.form.get('sid')
    if 'uid' in session:
        uid = session['uid']
        lookup.addComment(conn, commentText, uid, cid)
        flash('Comment submitted!')
        return redirect( url_for('read', cnum=cnum, sid=sid))

@app.route('/addCommentAjax/', methods=["POST"])
def addCommentAjax():
    conn = lookup.getConn(CONN)
    commentText = request.form.get("commentText")
    print(commentText)
    cid = request.form.get('cid')
    cnum = request.form.get('cnum')
    sid = request.form.get('sid')
    try:
        if 'uid' in session:
            uid = session['uid']
            lookup.addComment(conn, commentText, uid, cid)
            flash('Comment submitted!')
            return jsonify(error=False,
                            commentText=commentText,
                            uid=uid,
                            cid=cid
                            )
        else:
            flash("Log in before commenting.")
            return redirect(url_for('index'))
    except Exception as err:
        print(err)
        return jsonify( {'error': True, 'err': str(err) } )

@app.route('/logout/')
def logout():
    try:
        if 'username' in session:
            username = session['username']
            session.pop('username')
            session.pop('uid')
            session.pop('logged_in')
            flash('You are logged out')
            return redirect(url_for('index'))
        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('index') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('index') )

@app.route('/search/<search_kind>', defaults={'search_term': ""})
@app.route('/search/<search_kind>/<search_term>', methods=["GET"])
def worksByTerm(search_kind, search_term):
    term = search_term
    kind = search_kind
    conn = lookup.getConn(CONN)

    #search for works like the search term
    #if no search term, defaults to all movies 
    
    res = (lookup.searchAuthors(conn, term) if kind == "author" 
    else lookup.searchWorks(conn, kind, term))

    resKind = "Authors" if kind == "author" else "Works"
    nm = "Tag" if (kind == "tag") else "Term"
    if not res:
        flash("No {} Found Including {}: {} :( ".format(resKind, nm, term))
    #return "<p>{}</p>".format(res)
    return render_template('search.html', resKind=resKind, term=term, res=res)

if __name__ == '__main__':

    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)
{% extends 'base.html' %}

{% block content %}

<form action="" method="POST">
    <label>Title: <input type="text" name="title"></label> <br>
    <label>Summary: <textarea name="summary"></textarea></label> <br>
    <label>Genres:
        {% for g in genre %}
            <label> {{ g['tname'] }}
                <input type="checkbox" name="genre" value="{{ g['tid'] }}">
            </label> <br>
        {% endfor %}
    </label> <br>
    <label>Audience:
        {% for a in audience %}
            <label> {{ a['tname'] }}
                <input type="radio" name="audience" value="{{ a['tid'] }}">
            </label> <br>
        {% endfor %}
    </label> <br>
    <label>Warnings:
        {% for w in warnings %}
        <label> {{ w['tname'] }}
            <input type="checkbox" name="warnings" value="{{ w['tid'] }}">
        </label> <br>
        {% endfor %}
    </label> <br>
    <label>Status:
        {% for i in isFin %}
        <label> {{ i['tname'] }}
            <input type="radio" name="isFin" value="{{ i['tid'] }}">
        </label> <br>
        {% endfor %}
    </label> <br>
    <input type="submit" value="submit">
</form>

{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Claire Cannatti and Sophia Bussey and Svetha Pulavarty">
    <meta name="description" content="A site for posting and critiquing creative writing.">
    <!-- <meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'self'; connect-src 'self' blob:; img-src 'self' data: blob:; style-src 'self' 'unsafe-inline'; font-src 'self';" > -->

    <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{url_for('static', filename = 'style.css')}}">
    <link rel="icon" href="images/icon.jpg">
    <title>{{page_title}}</title>
    {% block head_stuff %} {% endblock %}
</head>
<body>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>

        <nav class="navbar navbar-expand-lg navbar-light bg-light">
          <a class="navbar-brand" href="#" > </a>
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" >
            <span class="navbar-toggler-icon"></span>
          </button>
    
          <div class="collapse navbar-collapse" id="navbarSupportedContent"> 
            <ul class="navbar-nav mr-auto">
              <li class="nav-item active">
                <a class="nav-link" href="{{url_for('index')}}">critiq<span class="sr-only">(current)</span></a>
              </li>
              <li class="nav-item">
                <form method="POST" action="{{url_for('index')}}">
		              <!-- <fieldset> -->
                  <label>
                      <input required type="radio" name="search_kind" value="work">
                      By Title
                  </label>
                  <label>
                      <input required type="radio" name="search_kind" value="author">
                      By Author
                  </label>
                  <label>
                    <input required type="radio" name="search_kind" value="tag">
                    By Tag
                  </label>
                  <!-- </fieldset> -->
                  <label id="searchlabel">
                    Search Works: 
                    <input id="term" name="search_term" value="">
                  </label>
                  <label id="selTag">
                    Select Desired Tag: 
                    <select id="select_tag" name="select_tag">
                      <option value="">Select a Tag</option>
                    </select>
                  </label>
                  <input type="submit" name="submit-btn" value="Search">
                </form>
              </li>
              {% if 'uid' in session %}
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Profile</a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                      
                      <a class="dropdown-item" href="{{url_for('profile', uid=session['uid'])}}">My Profile</a>
                      <a class="dropdown-item" href="{{url_for('manage')}}">Manage My Stories</a>
                      <a class="dropdown-item" href="{{url_for('bookmarks')}}">My Bookmarks</a>
                      <a class="dropdown-item" href="{{url_for('recommendations')}}">My Recommendations</a>
                      <a class="dropdown-item" href="{{url_for('logout')}}">Log out</a>
                      
                    </div>
                  </li>
                {% endif %}
            </ul>
          </div>
    
        </nav>
<!-- >>>>>>> 16cc9ff9edeb0d92834985b7e8eff2a1863156ba -->
{% with messages = get_flashed_messages() %}
    {% if messages %}
        <div id="messages">
        {% for msg in messages %}
            <p>{{msg}}</p>
        {% endfor %}
        </div>
    {% endif %}
{% endwith %}
        
<div class="row">
  <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1 col-xs-1"></div>

  <div class="col-xl-8 col-lg-8 col-md-10 col-sm-10 col-xs-10">
    {% block content %}
    <h1>Welcome!</h1>
    {% endblock %}
    

  </div>

  <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1 col-xs-1"></div>
</div>


<script>

var URL = "{{url_for('getTags')}}"
$("span.navbar-toggler-icon").on("click", function (event) {
    $.ajax({
        type: "POST",
        url: URL, 
        data: JSON.stringify({'tags': {}, 'tagtype':{}}), 
        contentType: 'application/json; charset=UTF-8',   
        success: get_tags
    });

  //for later versions
  // if ($("#select_tag option").length <= 1) {
  //   console.log($("#select_tag option").length)
  //   $.post(URL, {'tags': {}}, get_tags)
  // }
});

function get_tags(obj) {
  var tags = Object.values(obj['tags']);
  for (var tag of tags) {
        $("select#select_tag").append(new Option(tag['tname'], tag['tname']));
  }
}

$("input[value='tag']").on("click", function (event) {
        $(this).closest("form")
               .find("label#searchlabel").hide()
        $(this).closest("form")
               .find("label#selTag").show()  
})
$("input[value='work']").on("click", function (event) {
        $(this).closest("form")
               .find("label#selTag").hide()
        $(this).closest("form")
               .find("label#searchlabel").show()         
})
$("input[value='author']").on("click", function (event) {
        $(this).closest("form")
               .find("label#selTag").hide()
        $(this).closest("form")
               .find("label#searchlabel").show()         
})
</script>
</body>
</html>



{% extends "base.html" %}

{% block content %}
<h1>Welcome to My App</h1>

<p>Please login or join, using one of the forms below:</p>

<p>BTW, here's a string you might use: Göthe

<form id="joinform" action="{{url_for('join')}}" method="post">
    <h2>Join</h2>
    <p><label><input type="text" name="username" required pattern="^\w+$"> Username</label></p>
    <p><label><input type="password" name="password1" required> Password </label></p>
    <p><label><input type="password" name="password2" required> Password again </label></p>
    <p><button type="submit">Submit</button></p>
</form>
    
<form id="loginform" action="{{url_for('login')}}" method="post">
    <h2>Login</h2>
    <p><label>Username: <input type="text" name="username" required pattern="^\w+$"></label></p>
    <p><label>Password: <input type="password" name="password" required></label></p>
    <p><button type="submit">Submit</button></p>
</form>

{% endblock %}
{% extends 'base.html' %}

{% block content %}

{% if stories %}

    {% for story in stories %}
    <div class="managestory">
        <a href= "{{ url_for('update', sid=story['sid']) }}">
            <p>Title: {{ story['title'] }} </p>
            <p>Summary: {{ story['summary'] }} </p>
            <p>Genre: {{ story['genre'] }} </p>
            <p>Audience: {{ story['audience'] }} </p>
            <p>Warnings: {{ story['warnings'] }} </p>
            <p>Stars: {{ story['stars'] }} </p>
        </a>
    </div>    
    {% endfor %}

{% endif %}

<a href= "{{ url_for('add') }}"><p>Add a story!</p></a>

{% endblock %}{% extends "base.html" %}

{% block content %}

<h1>{{username}}'s Profile</h1>

<p>Date of Birth: {{dob}}</p>
<p>Joined on: {{joined}}</p>


{% endblock %}{% extends 'base.html' %}

{% block content %}

<h5>{{author}}</h5>

<!-- text here -->

{{ story|safe }}

<ul>
    {% for i in allch %}
        <a href="{{url_for('read', sid=i['sid'], cnum=i['cnum'])}}"><p>Read chapter {{i['cnum']}}</p></a>
    {% endfor %}
</ul>

<!-- Need to include a Next Chapter Button -->

<div id="commentForm">
    <form id="commentForm" action="{{url_for('addComment')}}" method="POST">
        <label>Add a comment on this chapter</label>
            <textarea name="commentText" rows="8" class="form-control"></textarea>
            <br>
            <input id="commentSubmit" type="submit" class="btn btn-info" value="Comment">
            <input value={{story.cid}} id="cid" name="cid" type=hidden>
            <input value={{cnum}} id="cnum" name="cnum" type=hidden>
            <input value={{sid}} id="sid" name="sid" type=hidden>
    </form>

    <p id="commentConfirmation">Comment submitted!</p>
</div>

<script>
    $("#commentConfirmation").hide()
    // var progressive_on = true;
    // var URL = "{{url_for('addCommentAjax')}}"    

    // $("#commentSubmit").click(function() { 
    //     console.log('adding comment with Ajax')
    //     //turn on ajax
    //     if (progressive_on) {
    //         $(this).css("font-weight", "bold");
    //         var commentText = $(this).closest("form").find("textarea").val()
    //         console.log(commentText)
    //         var cid = $(this).closest("form").find("#cid").val()
    //         console.log(cid)
    //         var cnum = $(this).closest("form").find("#cnum").val()
    //         console.log(cnum)
    //         var sid = $(this).closest("form").find("#sid").val()
    //         console.log(sid)
    //         var comment = $.post(URL, {'commentText': commentText,
    //                                    'cid': cid,
    //                                    'cnum': cnum,
    //                                    'sid': sid}, showConfirmation)
    //     }
    // });

    // function showConfirmation(obj) {
    //     console.log(obj);

    //     if(obj.error) {
    //         $("#errors").empty().html('Error: '+obj.err);
    //         console.log('obj error')
    //     } else {
    //         $("#commentConfirmation").show();
    //     }
    // }

</script>

<noscript>
    <p>Your browser doesn't support JavaScript.</p>
</noscript>

{% endblock %}<!-- <div class="unselectable"> -->
    <!-- {% include url_for('uploaded', filename=story.filename) %} -->
<!-- </div> -->{% extends "base.html" %}

{% block content %}

<h1>Recommendations</h1>

{% for rec in recommendations %}
<div class="rec">
    <h4><a href="/work/{{rec.sid}}">Title: {{rec.title}}</a></h4>
    <p>Author: {{rec.author}}</p>
    <p>{{rec.rating}}/5.0</p>
    <p>Tags: 
        {%for tag in rec.tags %}
            <div class="tag">{{tag}}</div>
        {% endfor %}
    </p>
    <p>Summary: {{rec.summary}}</p>
</div>
{% endfor %}

{% endblock %}{%extends "base.html" %}

{% block content %}
<!-- <div id="featured-movie">
    <h3>Featured Movie: #<span id='tt'></span></h3>
    <h4>Title: <span id='title'></span> Directed By: <span id='director'></span> 
        Release: <span id='release'></span></h4>
</div> -->
<div id="results">
        <h1>Search Results for {{resKind}}: '{{term}}' </h1>
        <table id="res-list">
            <tr>
	      {% if resKind=="Works" %}
                <th>Title</th>
                <th>Author</th>
                <th>Chapter Count </th>
                <th>Date Updated </th>
	      {% else %}
		<th>Author Username</th>
	      {% endif %}
            </tr>
        {%for result in res %}
        {% if resKind=="Works" %}
            {% if result and result['sid'] %}   
            <tr work-sid="{{result['sid']}}">
                <td class="title"><a href="{{url_for('read', sid=result.sid)}}">{{result['title']}}</a></td>
                <td class="author">{{result['username']}}</td>
                <td class="chapter-cnt">{{result['count(sid)']}}</td>
                <td class="updated">{{result['updated']}}</td>
            </tr> 
            {% else %}
            <tr><td>No results found</td></tr>
            {% endif %} 
	    {% else %}
	        <tr uid="{{result['uid']}}">
	            <td class="uname">{{result['username']}}</td>
	        </tr>
        {% endif %}
        
        {%endfor%}
	    

        </table>

</div>

{%endblock%}
{% extends 'base.html' %}

{% block content %}
<body>

    <form action="" method="POST">
        <textarea id="tinytext" name="write"></textarea>
        <input type="submit" name="submit">
    </form>

<ul>
{% for i in allch %}
    <a href="{{url_for('update', sid=i['sid'], cnum=i['cnum'])}}"><p>Edit chapter {{i['cnum']}}</p></a>
    {% if loop.last %}
    <a href="{{url_for('update', sid=i['sid'], cnum=(i['cnum']+1))}}"><p>Add Chapter {{i['cnum']+1}}</p></a>
    {% endif %}
{% endfor %}
</ul>

<script>
var story = "{{story|safe}}"
</script>
<script src="{{ url_for('static', filename='tinyeditor.js') }}" defer></script>

</body>
{% endblock %}
/* For flashed messages; make them stand out using red and italics */

#messages {
    color: red;
    font-style: italic;
}

h1 {
    font-size: 200%;
    color: teal;
}

.row {
    padding-top: 5%;
}

.unselectable {
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
#selTag {
    display: none;
}
.search_term {
    visibility: visible;
}tinymce.init({
    selector:'#tinytext',
    plugins: ['wordcount hr spellchecker lists'],
    toolbar: ['undo redo | bold italic underline strikethrough | alignleft aligncenter alignright | bullist numlist | blockquote hr indent outdent | removeformat'],
    menubar: false, //sorry scott that line above needs to be long
    width: 700, //px
    height: 600,
    element_format: 'html',
    init_instance_callback : function(editor) {
        editor.setContent(story)

        var freeTiny = document.querySelector('.tox .tox-notification--in');
        freeTiny.style.display = 'none';
    }
});