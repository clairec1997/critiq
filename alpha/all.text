====================== app.py =====================
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify
                   )
import dbi
from werkzeug import secure_filename
import sys,os,random
from threading import Thread, Lock

import lookup
import bleach
import bcrypt

UPLOAD_FOLDER = '/uploaded/'
ALLOWED_EXTENSIONS = {'txt', 'png', 'jpg', 'jpeg', 'gif'}

CONN = 'critiq_db'
# CONN = 'ccannatt_db'

lock = Lock()

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

@app.route('/', methods=["GET", "POST"])
def index():

    if request.method == "POST":
        kind = request.form.get('search_kind')
        term = (request.form.get('select_tag') if kind == "tag" 
                else request.form.get('search_term'))
        print ("term", term)

        return redirect(url_for('worksByTerm', search_kind=kind, search_term=term))    
    else:
        if 'username' in session:
            return redirect( url_for('recommendations'))
        else:
            return render_template('main.html',title='Hello')

@app.route('/getTags/', methods=["POST"])
def getTags():
    conn = lookup.getConn(CONN)
    tags = lookup.getTags(conn, 'genre')

    return jsonify( {'tags': tags} )

@app.route('/join/', methods=["POST"])
def join():
    try:
        username = request.form['username']
        passwd1 = request.form['password1']
        passwd2 = request.form['password2']
        if passwd1 != passwd2:
            flash('Passwords do not match')
            return redirect( url_for('index'))
        if len(passwd1) < 12:
            flash('Passwords must be at least 12 characters long')
            return redirect( url_for('index'))
        hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
        hashed_str = hashed.decode('utf-8')

        conn = lookup.getConn(CONN)
        lock.acquire()
        try:
            lookup.insertPass(conn, username, hashed_str)
        except Exception as err: # this is not getting thrown
            flash('That username is taken.')#: {}'.format(repr(err)))
            return redirect(url_for('index'))
        uid = lookup.getUIDFirst(conn)
        lock.release()
        # print(uid)
        flash('FYI, you were issued UID {}'.format(uid))
        session['username'] = username
        session['uid'] = uid
        session['logged_in'] = True
        # session['visits'] = 1
        return redirect( url_for('profile', username=username) )
    except Exception as err:
        flash('Form submission error '+str(err))
        return redirect( url_for('index') )

@app.route('/login/', methods=["POST"])
def login():
    try:
        username = request.form['username']
        passwd = request.form['password']
        conn = lookup.getConn(CONN)
        row = lookup.getLogin(conn, username)
        if row is None:
            # Same response as wrong password,
            # so no information about what went wrong
            flash('Login incorrect. Try again or join')
            return redirect( url_for('index'))
        hashed = row['passhash'] 
        
        hashed2 = bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8'))#.encode('utf-8'))
        hashed2_str = hashed2.decode('utf-8')
        
        if hashed2_str == hashed:
            flash('Successfully logged in as '+username)
            session['username'] = username
            session['uid'] = row['uid']
            uid=session['uid']
            # print(session['uid'])
            session['logged_in'] = True
            # session['visits'] = 1
            return redirect( url_for('recommendations') )
        else:
            flash('Login incorrect. Try again or join')
            return redirect( url_for('index'))
    except Exception as err:
        flash('Form submission error: '+str(err))
        return redirect( url_for('index') )


#we should make this by username, not uid
@app.route('/profile/<username>', methods = ["GET", "POST"]) #allow everyone to access all profiles, but only if logged in can change data
def profile(username):
    conn = lookup.getConn(CONN)
    # try:
    if request.method == "POST":
        if 'uid' in session:
            uid = session['uid']
            # conn = lookup.getConn(CONN)
            lookup.updatePrefs(conn, uid, request.form.getlist('pref[]'))
            flash('Your preferences have been updated!')      
    
    # don't trust the URL; it's only there for decoration
    if 'username' in session:
        currentUsername = session['username']
        uid = lookup.getUID(conn, username)#session['uid']
        prefs = lookup.getPrefs(conn, uid)
        tids = [tag['tid'] for tag in prefs]
        allTags = [tag for tag in lookup.getTags(conn, 'genre')
                        if tag['tid'] not in tids]
        stories = lookup.getStories(conn, uid)
        # session['visits'] = 1+int(session['visits'])
        if prefs:
            giveprefs = prefs
        else:
            giveprefs = {}
        return render_template('profile.html',
                            page_title="{}'s Profile".format(username),
                            username=username, uid=uid, prefs=giveprefs,
                            allTags=allTags, stories=stories, currentUsername=currentUsername
                            )
    else:
        flash('You are not logged in. Please login or join')
        return redirect( url_for('index') )
    # except Exception as err:
    #     flash('Some kind of error '+str(err))
    #     return redirect( url_for('index') )

@app.route('/updateProfile/', methods=["POST"])
def updateProfile():
    conn = lookup.getConn(CONN)
    uid = session['uid']
    dob = request.form.get('dob')

    lookup.updateProfile(conn, uid, dob)
    username = session['username']
    return redirect( url_for('profile', username=username))

@app.route('/prefs/<uid>', methods=["GET"])
def prefs(uid):
    try:
        if 'uid' in session:
            uid = session['uid']
            conn = lookup.getConn(CONN)
            prefs = lookup.getPrefs(conn, uid)
            tids = [tag['tid'] for tag in prefs]
            allTags = [tag for tag in lookup.getTags(conn, 'genre')
                         if tag['tid'] not in tids]
            if prefs:
                return render_template('profile.html', uid=uid, prefs=prefs, allTags=allTags)
            else:
                return render_template('profile.html', uid=uid, prefs={}, allTags=allTags)
        else: 
            flash("Please log in or join")
            return redirect(url_for('index'))
    except Exception as err:
        flash('Error: '+str(err))
        return redirect(url_for('index'))


@app.route('/manage/')
def manage():
    try:
        if 'uid' in session:
            uid = session['uid']
            conn = lookup.getConn(CONN)
            stories = lookup.getStories(conn, uid)
            return render_template('manage.html', title="Hello", stories=stories)
        else: 
            flash("Please log in or join")
            return redirect(url_for('index'))
    except Exception as err:
        flash('Error: '+str(err))
        return redirect( url_for('index') )
    
@app.route('/add/', methods=["GET", "POST"])
def add():
    try:
        if request.method == "GET":
            if 'uid' in session:
                uid = session['uid']
                conn = lookup.getConn(CONN)
                genre = lookup.getTags(conn, 'genre')
                warnings = lookup.getTags(conn, 'warnings')
                audience = lookup.getTags(conn, 'audience')
                isFin = lookup.getTags(conn, 'isFin')
                return render_template('add.html',title='Add Story', warnings=warnings, 
                                    genre=genre, audience=audience, isFin=isFin)
            else:
                flash("Please log in or join")
                return redirect(url_for('index'))
                
        if request.method == "POST":
            uid = session['uid']
            title = request.form['title']
            summary = request.form['summary']
            genre = request.form.getlist('genre')
            audience = request.form['audience']
            warnings = request.form.getlist('warnings')
            status = request.form['isFin']
        
            conn = lookup.getConn(CONN)
            lock.acquire()
            sid = lookup.addStory(conn, uid, title, summary, status)[0]
            lock.release()
            lookup.addTags(conn, sid, genre, warnings, audience, status)

            return redirect(url_for('update', sid=sid))
    except Exception as err:
        flash('Error: '+str(err))
        return redirect( url_for('index') )

@app.route('/update/<int:sid>/', defaults={'cnum':1}, methods=["GET","POST"])
@app.route('/update/<int:sid>/<int:cnum>/', methods=["GET","POST"])
def update(sid, cnum):
    try:
        conn = lookup.getConn(CONN)
        authorid = lookup.getAuthorId(conn,sid)[0]
        print(authorid, session['uid'])

        if 'uid' in session and session['uid']==authorid:
            if request.method=="GET":
                chapter = lookup.getChapter(conn, sid, cnum)
                story = ""
                if chapter:
                    infile = open(chapter['filename'], 'r')
                    story = infile.read()
                    infile.close()
                allch = lookup.getChapters(conn, sid)
                return render_template('write.html', title='Update Story',
                                sid=sid, cnum=cnum, story=story, allch=allch)

            if request.method=="POST":
                sometext = request.form['write']
                somehtml = bleach.clean(sometext, #allowed tags, attributes, and styles
                    tags=['b','blockquote','i','em','strong','p','ul','br','li','ol','span', 'pre'], 
                    attributes=['style'],
                    styles=['text-decoration', 'text-align'])

                dirname = os.path.dirname(__file__)
                relative = 'uploaded/'+'sid'+str(sid)+'cnum'+str(cnum)+'.html'
                filename = os.path.join(dirname, relative)

                outfile = open(filename, 'w')
                outfile.write(somehtml)
                outfile.close()
                
                chapter = lookup.getChapter(conn,sid,cnum)

                if not chapter:
                    lookup.setChapter(conn, sid, cnum, filename)

                return redirect(url_for('read', sid=sid, cnum=cnum))
        else: 
            flash('''You are not authorized to edit this work. 
                    Please log in with the account associated with this work''')
            return redirect(url_for('index'))
    except Exception as err:
        flash('Some kind of error '+str(err))
        return redirect( url_for('index') )

@app.route('/read/<int:sid>', defaults={'cnum': 1}, methods=["GET", "POST"])
@app.route('/read/<int:sid>/<int:cnum>/', methods=["GET", "POST"])
def read(sid, cnum): 
    conn = lookup.getConn(CONN)
    # print("sid: "+str(sid))
    # print("cnum: "+str(cnum))
    try:
        chapter = lookup.getChapter(conn, sid, cnum)
        print('Chapter dict:')
        print(chapter)
        cid = chapter['cid']
        # print(cid)
        try:
            uid = session['uid']

            #add to history
            print(lookup.addToHistory(conn, uid, sid))

            comments = lookup.getComments(conn, uid, cid)
            
            # print('Comments:')
            # print(comments)
            infile = open(chapter['filename'], 'r')
            story = infile.read()
            infile.close()

            allch = lookup.getChapters(conn,sid)
            numChap = lookup.getNumChaps(conn, sid)['count(cid)']
            # print(numChap)
            work = lookup.getStory(conn, sid)
            print(work)
            if uid == work['uid']:
                allComments = lookup.getAllComments(conn, cid)
            else:
                allComments = None

            if 'username' not in session:
                return redirect(url_for('index'))
            if session['username'] == work['username']:
                isUpdate = True
            else: 
                isUpdate = False
            return render_template('read.html', 
                                    title=work['title'], 
                                    story=story,
                                    chapter=chapter,
                                    author=work['username'],
                                    cnum=cnum,
                                    sid=sid,
                                    update=isUpdate,
                                    allch=allch,
                                    comments=comments,
                                    uid=uid,
                                    maxCh=numChap,
                                    allComments=allComments)
        except Exception as err:
            print(err)
            return redirect( url_for('index') )
    except Exception as err:
        return redirect( url_for('notFound') )

@app.route('/404/')
def notFound():
    return render_template('404.html', title='404')

@app.route('/bookmarks/')
def bookmarks():
    return render_template('main.html',title='Hello')

@app.route('/recommendations/', methods=["GET", "POST"])
def recommendations():
    if 'uid' in session:
        if request.method=="POST":
            filters = tuple(request.form.getlist('warnings[]'))
            
        else:
            uid = session['uid']
            conn = lookup.getConn(CONN)
            warnings = lookup.getTags(conn, 'warnings')

            recs = lookup.getRecs(conn, uid)
            return render_template('search.html',
                                    resKind="Recs", res = recs, warnings=[])
    else:
        return redirect(url_for('index'))

@app.route('/addComment/', methods=["POST"])
def addComment():
    conn = lookup.getConn(CONN)
    commentText = request.form["commentText"]
    cid = request.form['cid']
    # print(commentText)
    if 'uid' in session:
        uid = session['uid']
        lock.acquire()
        lookup.addComment(conn, commentText, uid, cid)
        lock.release()
        flash('Comment submitted!')
        return redirect(request.referrer)
    else:
        return redirect(url_for('index'))

# @app.route('/addCommentAjax/', methods=["POST"])
# def addCommentAjax():
#     conn = lookup.getConn(CONN)
#     commentText = request.form.get("commentText")
#     print(commentText)
#     cid = request.form.get('cid')
#     cnum = request.form.get('cnum')
#     sid = request.form.get('sid')
#     try:
#         if 'uid' in session:
#             uid = session['uid']
#             lookup.addComment(conn, commentText, uid, cid)
#             flash('Comment submitted!')
#             return jsonify(error=False,
#                             commentText=commentText,
#                             uid=uid,
#                             cid=cid
#                             )
#         else:
#             flash("Log in before commenting.")
#             return redirect(url_for('index'))
#     except Exception as err:
#         print(err)
#         return jsonify( {'error': True, 'err': str(err) } )

@app.route('/rateAjax/', methods=["POST"])
def rateAjax():
    # print('rateAjax called')
    conn = lookup.getConn(CONN)
    rating = request.form.get('rating')
    sid = request.form.get('sid')
    uid = session['uid']
    # print("rating to add:")
    # print(rating)
    lookup.addRating(conn, uid, sid, rating)
    avgRating = float(lookup.calcAvgRating(conn, sid)['avg(rating)'])
    # print("average rating for sid " + str(sid))
    # print(avgRating)
    lookup.updateAvgRating(conn, sid, avgRating)
    return jsonify(rating=rating, avgRating=avgRating)
    

@app.route('/logout/')
def logout():
    try:
        if 'username' in session:
            username = session['username']
            session.pop('username')
            session.pop('uid')
            session.pop('logged_in')
            flash('You are logged out')
            return redirect(url_for('index'))
        else:
            flash('You are not logged in. Please login or join')
            return redirect( url_for('index') )
    except Exception as err:
        flash('Some kind of error '+str(err))
        return redirect( url_for('index') )

@app.route('/search/<search_kind>/', defaults={'search_term': ""})
@app.route('/search/<search_kind>/<search_term>', methods=["GET", "POST"])
def worksByTerm(search_kind, search_term):
    term = search_term
    print ("term ", term)
    kind = search_kind
    conn = lookup.getConn(CONN)
    if (request.method == "POST") and not (kind == "author"):
        filters = tuple(request.form.getlist('warnings[]'))
        res = lookup.searchWorks(conn, kind, term, filters)
    # if no search term, defaults to all movies
    # if request.form.getlist('warnings[]'):

    else:
        res = (lookup.searchAuthors(conn, term) if kind == "author" 
        else lookup.searchWorks(conn, kind, term, []))
    resKind = "Authors" if kind == "author" else "Works"
    nm = "Tag" if (kind == "tag") else "Term"
    if not res:
        flash("No {} Found Including {}: {} :( ".format(resKind, nm, term))
    # return "<p>{}</p>".format(str(res))
    return render_template('search.html', resKind=resKind, term=term, 
                            res=res, warnings=lookup.getTags(conn, 'warnings'))

@app.route('/chapIndex/', methods=["POST"])
def chapIndex():
    sid = request.form.get('sid')
    cnum = request.form.get('cid')
    print(sid, cnum)
    return redirect( url_for('read', sid=sid, cnum=cnum))

@app.route('/history/', methods = ["GET"])
def history():
    if 'uid' in session:
        uid = session['uid']
        conn = lookup.getConn(CONN)
        hist = lookup.getHistory(conn, uid)
        return render_template('history.html',
                                history=hist)
    else:
        return redirect(url_for('index'))

if __name__ == '__main__':

    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)

====================== lookup.py =====================
import dbi
from datetime import *

DSN = None

# We need to add transaction locking eventually

def getConn(db):
    '''returns a database connection to the given database'''
    global DSN
    if DSN is None:
        DSN = dbi.read_cnf()
    conn = dbi.connect(DSN)
    conn.select_db(db)
    return conn

def insertPass(conn, username, hashed_str):
    '''inserts user into database when they make an account'''
    curs = dbi.cursor(conn)
    curs.execute('''INSERT INTO users(uid,username,passhash)
                            VALUES(null,%s,%s)''',
                         [username, hashed_str])

def getUIDFirst(conn):
    '''gets last inserted uid'''
    curs = dbi.cursor(conn)
    curs.execute('select LAST_INSERT_ID()')
    row = curs.fetchone()
    print(row)
    uid = row[0]
    return uid

def getUID(conn, username):
    curs = dbi.cursor(conn)
    curs.execute('''select uid from users where username=%s''', [username])
    return curs.fetchone()

def getLogin(conn, username):
    '''gets hashed password to check for login'''
    curs = dbi.dictCursor(conn)
    curs.execute('''SELECT uid,passhash
                      FROM users
                      WHERE username = %s''',
                     [username])
    return curs.fetchone()

def updateProfile(conn, uid, dob):
    curs = dbi.dictCursor(conn)
    curs.execute('''update users
                    set dob=%s
                    where uid=%s''', [dob, uid])

def searchWorks(conn, kind, searchterm, filters):
    '''finds works with title including searchterm or tag = searchterm 
        takes chosen filters into acct'''
    curs = dbi.dictCursor(conn)

    dofilter = ("where sid not in (select sid from taglink where tid in %s)" 
                if filters else "")

    searchParam =  (['%' + searchterm + '%'] if kind == "work" 
                        else [searchterm])     

    params = ([searchParam, filters] if filters else [searchParam])

    if kind == "work":
        curs.execute('''select * from (select sid, uid, title, updated, 
                    summary, stars, wip, count(sid) from
                    (select * from works where title like %s) as q1 
                    left outer join chapters using(sid) group by sid) as q2 
                    left outer join (select uid, username from users) as q3 
                    using(uid)''' + dofilter, 
                params)
    else:
        curs.execute('''select * from (select sid, uid, title, updated, 
                        summary, stars, wip, count(sid) from 
                        (select tid from tags where tname = %s) as q1 
                        left outer join taglink using(tid) 
                        left outer join works using(sid)
                        left outer join chapters using(sid) group by sid) as q3
                        left outer join (select uid, username from users) as q4
                        using(uid)''' + dofilter, 
                        params)
            
    return curs.fetchall()


# def searchWorks(conn, kind, searchterm, filters=None):
#     '''finds works with title including searchterm or tag = searchterm'''
#     curs = dbi.dictCursor(conn)
    
#     curs.execute('''select * from 
#                     (select sid from taglink where tid not in %s group by sid) as q1
#                     left outer join works using (sid)
#                     where title like %s''', 
#                     [filters, '%' + searchterm + '%'])
#     else:
#         curs.execute('''select * from 
#                     (select sid, uid, title, updated, 
#                     summary, stars, count(sid) from
#                     (select * from works where title like %s) 
#                     as q1 left outer join chapters using(sid) group by sid) 
#                     as q2 left outer join 
#                     (select uid, username from users) as q3 using(uid)''', 
#                     ['%' + searchterm + '%'])
#         curs.execute('''select * from (select sid, uid, title, updated, 
#                         summary, stars, count(sid) from 
#                         (select tid from tags where tname = %s) as q1 
#                         left outer join (select tid, sid from taglink) as q2
#                         using(tid) 
#                         left outer join works using(sid)
#                         left outer join chapters using(sid) group by sid) as q3
#                         left outer join (select uid, username from users) as q4
#                         using(uid)''', [searchterm])
        
#     return curs.fetchall()


def searchAuthors(conn, author):
    '''finds authorsmathing name'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select uid, username from users where 
                 username like %s''', 
                 ['%' + author + '%'])
    return curs.fetchall()

def getStories(conn, uid):
    '''Returns all works associated with an account'''
    curs=dbi.dictCursor(conn)
    curs.execute('''select * from works
                where uid = %s''', [uid])
    return curs.fetchall()

def getStory(conn, sid):
    '''Returns a work with given sid'''
    curs=dbi.dictCursor(conn)
    curs.execute('''select * from works inner join users
                    on users.uid=works.uid where sid=%s''', [sid])
    return curs.fetchone()

def getChapter(conn, sid, cnum):
    '''returns a chapter of a story'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select works.title as title,
                    works.wip as wip,
                    works.summary as summary, 
                    works.wip as wip,
                    works.title as title, 
                    chapters.filename as filename,
                    chapters.cid as cid 
                    from works inner join chapters using (sid)
                    where sid=%s and cnum=%s
                    ''', [sid, cnum])
    return curs.fetchone()

def setChapter(conn, sid, cnum, filename):
    '''Given sid, cnum, filename, sets the chapter'''
    curs = dbi.cursor(conn)
    curs.execute('''insert into chapters(sid, cnum, filename)
                values (%s, %s, %s)''',
                [sid, cnum, filename])

def getAuthor(conn, sid):
    '''given an sid, gets the username'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select username from works inner join users using (uid)
                    where sid=%s''', [sid])
    return curs.fetchone()

def getAuthorId(conn, sid):
    '''given an sid, gets the uid'''
    curs = dbi.cursor(conn)
    curs.execute('''select uid from works inner join users using (uid)
                    where sid=%s''', [sid])
    return curs.fetchone()

def getTags(conn, type):
    '''given a tag type, gets tags of that type'''
    curs=dbi.dictCursor(conn)
    curs.execute('select * from tags where ttype=%s',[type])
    return curs.fetchall()

def addStory(conn, uid, title, summary, isFin):
    '''given a uid, title, summary, adds the story'''
    curs = dbi.cursor(conn)
    curs.execute('''insert into works(uid, title, summary, wip)
                    values (%s, %s, %s, %s)''', 
                    [uid, title, summary, isFin])
    curs.execute('select last_insert_id()')
    return curs.fetchone()

# def getTagsAjax(conn):
#     '''given a conn, gets all tag names'''
#     curs = dbi.dictCursor(conn)
#     curs.execute('''select tname from tags''')
#     return curs.fetchall()
    
def addTags(conn, sid, genre, warnings, audience, isFin):
    '''adds tags to a story'''
    curs = dbi.cursor(conn)
    tagslist = [*genre, *warnings, *audience, *isFin]
    for i in tagslist:
        curs.execute('''insert into taglink(tid, sid)
        values (%s, %s)''', [i, sid])

def getStoryTags(conn, sid):
    '''gets a story's tags'''
    curs = dbi.cursor(conn)
    pass

def addComment(conn, commentText, uid, cid):
    '''adds a comment to a chapter'''
    curs = dbi.cursor(conn)
    # print(uid)
    # print(cid)
    curs.execute('''insert into reviews(commenter, reviewText) values(%s, %s)''', [uid, commentText])
    curs.execute('select LAST_INSERT_ID()')
    row = curs.fetchone()
    rid = row[0]
    curs.execute('''insert into reviewCredits values(%s, %s)''', [rid, cid])

def getChapters(conn, sid):
    '''given sid, gets all chapters'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select * from chapters 
                where sid=%s
                order by cnum asc''',[sid])
    return curs.fetchall()

def getPrefs(conn, uid):
    '''given uid, retrieves users prefs'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select tid, tname from 
                prefs left outer join tags 
                using(tid) where uid=%s''', 
                [uid])
    return curs.fetchall()
    
def updatePrefs(conn, uid, prefs):
    curs = dbi.dictCursor(conn)
    curs.execute('''delete from prefs where uid=%s''',
                [uid])
    for pref in prefs:
        curs.execute('''insert into prefs values(%s, %s)''',
                    [uid, pref])
    # return getPrefs(conn, uid)

def getRecs(conn, uid):
    curs = dbi.dictCursor(conn)
    print(getPrefs(conn, uid))
    tags = tuple([tag['tid'] for tag in getPrefs(conn, uid)])
    print (tags)
    curs.execute('''select sid, uid, title, updated, summary, 
                stars, count(sid), username from 
                    (select sid from taglink where tid in %s group by sid) as q1 
                left outer join works using(sid) 
                left outer join 
                    (select uid, username from users) as q2 
                using (uid) 
                left outer join chapters using(sid) group by sid
                order by stars desc''', 
                [tags])
                
    res = curs.fetchall()
    print (res)
    return res

def getComments(conn, uid, cid):
    curs = dbi.dictCursor(conn)
    curs.execute('''select reviewText from reviews inner join reviewCredits using(rid)
                    where commenter=%s and cid=%s
                    ''', [uid, cid])
    return curs.fetchall()

def calcAvgRating(conn, sid):
    curs = dbi.dictCursor(conn)
    curs.execute('''select avg(rating) from ratings
                        inner join works using(sid)
                        where sid=%s''', [sid])
    return curs.fetchone()

def updateAvgRating(conn, sid, avg):
    curs = dbi.dictCursor(conn)
    curs.execute('''update works set avgRating=%s 
                    where sid=%s''', [avg, sid])

def addRating(conn, uid, sid, rating):
    curs = dbi.dictCursor(conn)
    curs.execute('''select * from ratings where sid=%s and uid=%s''', [sid, uid])
    if curs.fetchone() is not None:
        curs.execute('''update ratings set rating=%s 
                    where sid=%s and uid=%s''', [rating, sid, uid])
    else:
        curs.execute('''insert into ratings(uid, sid, rating) 
                        values(%s, %s, %s)''', [uid, sid, rating])

def getNumChaps(conn, sid):
    curs = dbi.dictCursor(conn)
    curs.execute('''select count(cid) from chapters where sid=%s''', [sid])
    return curs.fetchone()

def addToHistory(conn, uid, sid):
    now = datetime.now()
    #frmat = now.strftime('%Y-%m-%d %H:%M:%S')
    curs = dbi.dictCursor(conn)
    curs.execute('''insert into history values(%s, %s, %s) 
                    on duplicate key update visited = %s''',
                    [uid, sid, now, now])
def getHistory(conn, uid):
    curs = dbi.dictCursor(conn)
    curs.execute('''select sid, uid, title, updated, summary, 
                    stars, count(sid), username, visited from  
                    (select sid, visited from history where uid = %s) as q1
                    left outer join works using(sid)
                    left outer join 
                    (select uid, username from users) as q2 
                    using(uid) 
                    left outer join chapters using(sid) group by sid
                    order by visited''', 
                    [uid])
    return curs.fetchall()
    
def getAllComments(conn, cid):
    curs = dbi.dictCursor(conn)
    curs.execute('''select reviews.reviewText as text, users.username as author, reviewCredits.cid as cid
                        from reviews inner join reviewCredits using (rid)
                        inner join users on reviews.commenter=users.uid where reviewCredits.cid=%s''', [cid])
    return curs.fetchall()
====================== createtables.sql =====================
drop table if exists history;
drop table if exists ratings;
drop table if exists prefs;
drop table if exists reviewCredits;
drop table if exists reviews;
drop table if exists taglink;
drop table if exists tags;
drop table if exists chapters;
drop table if exists works;
drop table if exists users;

create table users (
    uid int not null auto_increment primary key,
    username varchar(30), 
    passhash char(60),
    unique(username),
    index(username),
    commentscore DECIMAL
);

create table works (
    sid int not null auto_increment primary key,
    uid int not null,
    title VARCHAR(200),
    updated date,
    summary varchar(2000),
    stars float,
    wip boolean,
    avgRating decimal(10),
    index(uid),
    foreign key (uid) references users(uid)
        on UPDATE cascade
        on delete cascade
)

ENGINE = InnoDB;

create table chapters (
    cid int not null auto_increment,
    cnum int,
    sid int not NULL,
    filename varchar(100),

    PRIMARY KEY (cid),
    index(sid),
    foreign key (sid) references works(sid)
        on update cascade
        on delete cascade
)

ENGINE = InnoDB;

create table tags (
    tid int not null auto_increment primary key,
    ttype varchar(20) not null,
    tname varchar(50) not null unique
)

ENGINE = InnoDB;

create table taglink (
    tid int not null,
    sid int not null,

    foreign key(sid) references works(sid)
        on update cascade
        on delete cascade,
    foreign key(tid) references tags(tid)
        on update cascade
        on delete cascade
)

ENGINE = InnoDB;

create table reviews (
    rid int not null auto_increment primary key,
    commenter int not null,
    ishelpful int,
    reviewText varchar(2000),
    foreign key(commenter) references users(uid)
)

ENGINE = InnoDB;

create table reviewCredits ( 
    rid int not null,
    cid int not null,

    primary key(rid, cid),

    foreign key(rid) references reviews(rid)
        on update cascade
        on delete cascade,
    foreign key(cid) references chapters(cid)
        on update cascade
        on delete cascade
)

ENGINE = InnoDB;

create table prefs (
    uid int not null,
    tid int not null,
    primary key (uid, tid),

    foreign key(uid) references users(uid)
        on update cascade
        on delete cascade,
    foreign key (tid) references tags(tid)
        on update cascade
        on delete cascade
)
ENGINE = InnoDB;

create table ratings (
    uid int not null,
    sid int not null,
    rating int not null,
    primary key (uid, sid),
    
    foreign key(uid) references users(uid)
        on update cascade
        on delete cascade,
    foreign key (sid) references works(sid)
        on update cascade
        on delete cascade
)

ENGINE = InnoDB;

create table history (
    uid int not null,
    sid int not null,
    visited datetime,
    primary key (uid, sid),
    foreign key(uid) references users(uid)
        on update cascade
        on delete cascade,
    foreign key (sid) references works(sid)
        on update cascade
        on delete cascade
)

ENGINE = InnoDB;
====================== currentDB.sql =====================
-- MySQL dump 10.14  Distrib 5.5.64-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: critiq_db
-- ------------------------------------------------------
-- Server version	5.5.64-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `critiq_db`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `critiq_db` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `critiq_db`;

--
-- Table structure for table `chapters`
--

DROP TABLE IF EXISTS `chapters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `chapters` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cnum` int(11) DEFAULT NULL,
  `sid` int(11) NOT NULL,
  `filename` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`cid`),
  KEY `sid` (`sid`),
  CONSTRAINT `chapters_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chapters`
--

LOCK TABLES `chapters` WRITE;
/*!40000 ALTER TABLE `chapters` DISABLE KEYS */;
INSERT INTO `chapters` VALUES (1,1,1,'/students/critiq/critiq/draft/uploaded/sid1cnum1.html'),(2,1,2,'/students/critiq/critiq/draft/uploaded/sid2cnum1.html'),(3,2,2,'/students/critiq/critiq/draft/uploaded/sid2cnum2.html'),(4,2,1,'/students/critiq/critiq/draft/uploaded/sid1cnum2.html'),(5,3,2,'/students/critiq/critiq/draft/uploaded/sid2cnum3.html'),(6,1,3,'/students/critiq/critiq/draft/uploaded/sid3cnum1.html'),(7,1,4,'/students/critiq/critiq/draft/uploaded/sid4cnum1.html'),(8,2,4,'/students/critiq/critiq/draft/uploaded/sid4cnum2.html');
/*!40000 ALTER TABLE `chapters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviewCredits`
--

DROP TABLE IF EXISTS `reviewCredits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviewCredits` (
  `rid` int(11) NOT NULL,
  `cid` int(11) NOT NULL,
  PRIMARY KEY (`rid`,`cid`),
  KEY `cid` (`cid`),
  CONSTRAINT `reviewCredits_ibfk_1` FOREIGN KEY (`rid`) REFERENCES `reviews` (`rid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `reviewCredits_ibfk_2` FOREIGN KEY (`cid`) REFERENCES `chapters` (`cid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviewCredits`
--

LOCK TABLES `reviewCredits` WRITE;
/*!40000 ALTER TABLE `reviewCredits` DISABLE KEYS */;
INSERT INTO `reviewCredits` VALUES (1,1),(2,4),(3,2),(4,6);
/*!40000 ALTER TABLE `reviewCredits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviews`
--

DROP TABLE IF EXISTS `reviews`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviews` (
  `rid` int(11) NOT NULL AUTO_INCREMENT,
  `commenter` int(11) NOT NULL,
  `ishelpful` int(11) DEFAULT NULL,
  `reviewText` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`rid`),
  KEY `commenter` (`commenter`),
  CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`commenter`) REFERENCES `users` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviews`
--

LOCK TABLES `reviews` WRITE;
/*!40000 ALTER TABLE `reviews` DISABLE KEYS */;
INSERT INTO `reviews` VALUES (1,1,NULL,'wow, great story!'),(2,2,NULL,'as a recent teen i feel personally attacked by this content'),(3,2,NULL,'i can comment on my own work and i love it thank you for quality content\r\n'),(4,2,NULL,'this is incredibly insightful and i look forward to witnessing more of your work');
/*!40000 ALTER TABLE `reviews` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taglink`
--

DROP TABLE IF EXISTS `taglink`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taglink` (
  `tid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  KEY `sid` (`sid`),
  KEY `tid` (`tid`),
  CONSTRAINT `taglink_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `taglink_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `tags` (`tid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taglink`
--

LOCK TABLES `taglink` WRITE;
/*!40000 ALTER TABLE `taglink` DISABLE KEYS */;
INSERT INTO `taglink` VALUES (2,1),(4,1),(15,1),(16,1),(1,1),(2,1),(3,1),(3,1),(1,2),(2,2),(5,2),(6,2),(7,2),(10,2),(17,2),(18,2),(23,2),(26,2),(27,2),(29,2),(31,2),(1,2),(3,2),(3,2),(2,2),(1,3),(7,3),(10,3),(18,3),(1,3),(4,3),(3,3),(2,3),(10,4),(1,4),(2,4),(3,4),(3,4);
/*!40000 ALTER TABLE `taglink` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `ttype` varchar(20) NOT NULL,
  `tname` varchar(50) NOT NULL,
  PRIMARY KEY (`tid`),
  UNIQUE KEY `tname` (`tname`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'genre','Romance'),(2,'genre','Fantasy'),(3,'genre','Horror'),(4,'genre','Sci-Fi'),(5,'genre','Historical'),(6,'genre','Mystery'),(7,'genre','Humor'),(8,'genre','Literary'),(9,'genre','Thriller'),(10,'genre','Suspense'),(11,'genre','Poetry'),(12,'audience','General'),(13,'audience','Young Adult'),(14,'audience','18+'),(15,'warnings','Violence'),(16,'warnings','Gore'),(17,'warnings','Rape or Sexual Assault'),(18,'warnings','Sexual Content'),(19,'warnings','Racism'),(20,'warnings','Homophobia'),(21,'warnings','Suicidal Content'),(22,'warnings','Abuse'),(23,'warnings','Animal Cruelty'),(24,'warnings','Self-Harm'),(25,'warnings','Eating Disorder'),(26,'warnings','Incest'),(27,'warnings','Child Abuse or Pedophilia'),(28,'warnings','Death or Dying'),(29,'warnings','Pregnancy or Childbirth'),(30,'warnings','Miscarriages orAbortion'),(31,'warnings','Mental Illness'),(32,'isFin','Finished'),(33,'isFin','Work in Progress');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `uid` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) DEFAULT NULL,
  `passhash` char(60) DEFAULT NULL,
  `commentscore` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `username` (`username`),
  KEY `username_2` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'e','$2b$12$Ur/GY6v/v831mJdBD8o9bOFI5tCTNUwzLliJxHikkqaZBjZPN/c5a',NULL),(2,'sbussey','$2b$12$w53pirC8UMbHSPY9q37.HeOTpa3rB3MtGhasEPV6OH7RbtSdmnEDe',NULL),(3,'scott','$2b$12$X.xsPPzIRyjjTiUK6/qBHOtSfZwIySFynNsbYhP8e7QW6W2cAeuli',NULL),(4,'claire','$2b$12$y9sVbK.WTrAaE6czj756fuu6hsQR5efMZk9q1f1U.sZf5NI7aqeUa',NULL),(5,'sophia','$2b$12$yku/OWhnAgi85/jG7HCY5eNDT6k/uGS5jzxduwpWd3vbVqWv1yYD6',NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `works`
--

DROP TABLE IF EXISTS `works`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `works` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NOT NULL,
  `title` varchar(200) DEFAULT NULL,
  `updated` date DEFAULT NULL,
  `summary` varchar(2000) DEFAULT NULL,
  `stars` float DEFAULT NULL,
  PRIMARY KEY (`sid`),
  KEY `uid` (`uid`),
  CONSTRAINT `works_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `works`
--

LOCK TABLES `works` WRITE;
/*!40000 ALTER TABLE `works` DISABLE KEYS */;
INSERT INTO `works` VALUES (1,1,'Claire test 1',NULL,'wee!',NULL),(2,2,'test it ',NULL,'ahhhhh',NULL),(3,1,'whoop!',NULL,'be bop de doop',NULL),(4,4,'Claire\'s Big Adventure',NULL,'Claire walks a dog.',NULL);
/*!40000 ALTER TABLE `works` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-01 18:46:13

====================== dump2.sql =====================
-- MySQL dump 10.14  Distrib 5.5.64-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: critiq_db
-- ------------------------------------------------------
-- Server version	5.5.64-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `chapters`
--

DROP TABLE IF EXISTS `chapters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `chapters` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cnum` int(11) DEFAULT NULL,
  `sid` int(11) NOT NULL,
  `filename` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`cid`),
  KEY `sid` (`sid`),
  CONSTRAINT `chapters_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chapters`
--

LOCK TABLES `chapters` WRITE;
/*!40000 ALTER TABLE `chapters` DISABLE KEYS */;
INSERT INTO `chapters` VALUES (1,1,1,'/students/critiq/critiq/draft/uploaded/sid1cnum1.html'),(2,1,2,'/students/critiq/critiq/draft/uploaded/sid2cnum1.html'),(3,2,2,'/students/critiq/critiq/draft/uploaded/sid2cnum2.html'),(4,2,1,'/students/critiq/critiq/draft/uploaded/sid1cnum2.html'),(5,3,2,'/students/critiq/critiq/draft/uploaded/sid2cnum3.html'),(6,1,3,'/students/critiq/critiq/draft/uploaded/sid3cnum1.html'),(7,1,4,'/students/critiq/critiq/draft/uploaded/sid4cnum1.html'),(8,2,4,'/students/critiq/critiq/draft/uploaded/sid4cnum2.html'),(9,1,5,'/students/critiq/critiq/draft/uploaded/sid5cnum1.html'),(10,1,6,'/students/critiq/critiq/alpha/uploaded/sid6cnum1.html');
/*!40000 ALTER TABLE `chapters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `history`
--

DROP TABLE IF EXISTS `history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `history` (
  `uid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  `visited` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`uid`,`sid`,`visited`),
  KEY `sid` (`sid`),
  CONSTRAINT `history_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `history_ibfk_2` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `history`
--

LOCK TABLES `history` WRITE;
/*!40000 ALTER TABLE `history` DISABLE KEYS */;
INSERT INTO `history` VALUES (2,2,'2019-12-10 15:50:15'),(2,2,'2019-12-10 15:50:18'),(2,4,'2019-12-10 15:50:07'),(2,4,'2019-12-10 15:50:10'),(2,5,'2019-12-10 15:49:42');
/*!40000 ALTER TABLE `history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `prefs`
--

DROP TABLE IF EXISTS `prefs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `prefs` (
  `uid` int(11) NOT NULL,
  `tid` int(11) NOT NULL,
  PRIMARY KEY (`uid`,`tid`),
  KEY `tid` (`tid`),
  CONSTRAINT `prefs_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `prefs_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `tags` (`tid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `prefs`
--

LOCK TABLES `prefs` WRITE;
/*!40000 ALTER TABLE `prefs` DISABLE KEYS */;
INSERT INTO `prefs` VALUES (1,1),(1,2),(1,4),(1,10),(2,1),(2,2),(2,6),(2,7),(2,8),(2,9),(2,10),(5,2),(5,3),(5,5),(5,8);
/*!40000 ALTER TABLE `prefs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ratings`
--

DROP TABLE IF EXISTS `ratings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ratings` (
  `uid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  `rating` int(11) NOT NULL,
  PRIMARY KEY (`uid`,`sid`),
  KEY `sid` (`sid`),
  CONSTRAINT `ratings_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `ratings_ibfk_2` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ratings`
--

LOCK TABLES `ratings` WRITE;
/*!40000 ALTER TABLE `ratings` DISABLE KEYS */;
INSERT INTO `ratings` VALUES (1,6,2),(8,6,3);
/*!40000 ALTER TABLE `ratings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviewCredits`
--

DROP TABLE IF EXISTS `reviewCredits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviewCredits` (
  `rid` int(11) NOT NULL,
  `cid` int(11) NOT NULL,
  PRIMARY KEY (`rid`,`cid`),
  KEY `cid` (`cid`),
  CONSTRAINT `reviewCredits_ibfk_1` FOREIGN KEY (`rid`) REFERENCES `reviews` (`rid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `reviewCredits_ibfk_2` FOREIGN KEY (`cid`) REFERENCES `chapters` (`cid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviewCredits`
--

LOCK TABLES `reviewCredits` WRITE;
/*!40000 ALTER TABLE `reviewCredits` DISABLE KEYS */;
INSERT INTO `reviewCredits` VALUES (1,1),(2,4),(3,2),(4,6),(5,1),(6,1),(7,1),(9,9),(10,1),(11,8);
/*!40000 ALTER TABLE `reviewCredits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviews`
--

DROP TABLE IF EXISTS `reviews`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviews` (
  `rid` int(11) NOT NULL AUTO_INCREMENT,
  `commenter` int(11) NOT NULL,
  `ishelpful` int(11) DEFAULT NULL,
  `reviewText` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`rid`),
  KEY `commenter` (`commenter`),
  CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`commenter`) REFERENCES `users` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviews`
--

LOCK TABLES `reviews` WRITE;
/*!40000 ALTER TABLE `reviews` DISABLE KEYS */;
INSERT INTO `reviews` VALUES (1,1,NULL,'wow, great story!'),(2,2,NULL,'as a recent teen i feel personally attacked by this content'),(3,2,NULL,'i can comment on my own work and i love it thank you for quality content\r\n'),(4,2,NULL,'this is incredibly insightful and i look forward to witnessing more of your work'),(5,1,NULL,'test 2'),(6,1,NULL,'teset 3'),(7,1,NULL,'4'),(8,1,NULL,'mysql test'),(9,7,NULL,'Need to flesh this out more'),(10,7,NULL,'Too gross for me!'),(11,1,NULL,'boop!');
/*!40000 ALTER TABLE `reviews` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taglink`
--

DROP TABLE IF EXISTS `taglink`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taglink` (
  `tid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  KEY `sid` (`sid`),
  KEY `tid` (`tid`),
  CONSTRAINT `taglink_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `taglink_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `tags` (`tid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taglink`
--

LOCK TABLES `taglink` WRITE;
/*!40000 ALTER TABLE `taglink` DISABLE KEYS */;
INSERT INTO `taglink` VALUES (2,1),(4,1),(15,1),(16,1),(1,1),(2,1),(3,1),(3,1),(1,2),(2,2),(5,2),(6,2),(7,2),(10,2),(17,2),(18,2),(23,2),(26,2),(27,2),(29,2),(31,2),(1,2),(3,2),(3,2),(2,2),(1,3),(7,3),(10,3),(18,3),(1,3),(4,3),(3,3),(2,3),(10,4),(1,4),(2,4),(3,4),(3,4),(5,5),(31,5),(1,5),(2,5),(3,5),(3,5),(1,6),(2,6),(3,6),(2,6);
/*!40000 ALTER TABLE `taglink` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `ttype` varchar(20) NOT NULL,
  `tname` varchar(50) NOT NULL,
  PRIMARY KEY (`tid`),
  UNIQUE KEY `tname` (`tname`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'genre','Romance'),(2,'genre','Fantasy'),(3,'genre','Horror'),(4,'genre','Sci-Fi'),(5,'genre','Historical'),(6,'genre','Mystery'),(7,'genre','Humor'),(8,'genre','Literary'),(9,'genre','Thriller'),(10,'genre','Suspense'),(11,'genre','Poetry'),(12,'audience','General'),(13,'audience','Young Adult'),(14,'audience','18+'),(15,'warnings','Violence'),(16,'warnings','Gore'),(17,'warnings','Rape or Sexual Assault'),(18,'warnings','Sexual Content'),(19,'warnings','Racism'),(20,'warnings','Homophobia'),(21,'warnings','Suicidal Content'),(22,'warnings','Abuse'),(23,'warnings','Animal Cruelty'),(24,'warnings','Self-Harm'),(25,'warnings','Eating Disorder'),(26,'warnings','Incest'),(27,'warnings','Child Abuse or Pedophilia'),(28,'warnings','Death or Dying'),(29,'warnings','Pregnancy or Childbirth'),(30,'warnings','Miscarriages orAbortion'),(31,'warnings','Mental Illness'),(32,'isFin','Finished'),(33,'isFin','Work in Progress');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `uid` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) DEFAULT NULL,
  `passhash` char(60) DEFAULT NULL,
  `commentscore` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `username` (`username`),
  KEY `username_2` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'e','$2b$12$Ur/GY6v/v831mJdBD8o9bOFI5tCTNUwzLliJxHikkqaZBjZPN/c5a',NULL),(2,'sbussey','$2b$12$w53pirC8UMbHSPY9q37.HeOTpa3rB3MtGhasEPV6OH7RbtSdmnEDe',NULL),(3,'scott','$2b$12$X.xsPPzIRyjjTiUK6/qBHOtSfZwIySFynNsbYhP8e7QW6W2cAeuli',NULL),(4,'claire','$2b$12$y9sVbK.WTrAaE6czj756fuu6hsQR5efMZk9q1f1U.sZf5NI7aqeUa',NULL),(5,'sophia','$2b$12$yku/OWhnAgi85/jG7HCY5eNDT6k/uGS5jzxduwpWd3vbVqWv1yYD6',NULL),(7,'ross','$2b$12$zMd2OQ6s/1LoFUs74BPRmeB.URVlgg/pIdDd9ZJBHnVxSC4s7tR5.',NULL),(8,'f','$2b$12$ASbX02.jyDZyJJOSoVVfMesTjo.JU3xCCDtJXV8vrNa6Aiyai3NuW',NULL),(9,'g','$2b$12$RiiwqHO/qwUG7mNRA.5NZed4FCXoIWdS5Wy2.VFclSg9Avtd.Y8eS',NULL),(10,'h','$2b$12$bziG6sIOllwWG4vYLjWJqu.9f/lI/WDKA20zuQrvnctzWXbxzeHle',NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `works`
--

DROP TABLE IF EXISTS `works`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `works` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NOT NULL,
  `title` varchar(200) DEFAULT NULL,
  `updated` date DEFAULT NULL,
  `summary` varchar(2000) DEFAULT NULL,
  `stars` float DEFAULT NULL,
  `wip` tinyint(1) DEFAULT '0',
  `avgRating` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`sid`),
  KEY `uid` (`uid`),
  CONSTRAINT `works_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `works`
--

LOCK TABLES `works` WRITE;
/*!40000 ALTER TABLE `works` DISABLE KEYS */;
INSERT INTO `works` VALUES (1,1,'Claire test 1',NULL,'wee!',NULL,0,NULL),(2,2,'test it ',NULL,'ahhhhh',NULL,0,NULL),(3,1,'whoop!',NULL,'be bop de doop',NULL,0,NULL),(4,4,'Claire\'s Big Adventure',NULL,'Claire walks a dog.',NULL,0,NULL),(5,7,'how I went to college',NULL,'did some art, showed it to a person for feedback, and he accepted my portfolio!',NULL,0,NULL),(6,9,'finished',NULL,'dfg',NULL,1,3);
/*!40000 ALTER TABLE `works` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-10 15:51:43

====================== dump.sql =====================
-- MySQL dump 10.14  Distrib 5.5.64-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: critiq_db
-- ------------------------------------------------------
-- Server version	5.5.64-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `chapters`
--

DROP TABLE IF EXISTS `chapters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `chapters` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cnum` int(11) DEFAULT NULL,
  `sid` int(11) NOT NULL,
  `filename` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`cid`),
  KEY `sid` (`sid`),
  CONSTRAINT `chapters_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chapters`
--

LOCK TABLES `chapters` WRITE;
/*!40000 ALTER TABLE `chapters` DISABLE KEYS */;
INSERT INTO `chapters` VALUES (1,1,1,'/students/critiq/critiq/draft/uploaded/sid1cnum1.html'),(2,1,2,'/students/critiq/critiq/draft/uploaded/sid2cnum1.html'),(3,2,2,'/students/critiq/critiq/draft/uploaded/sid2cnum2.html'),(4,2,1,'/students/critiq/critiq/draft/uploaded/sid1cnum2.html'),(5,3,2,'/students/critiq/critiq/draft/uploaded/sid2cnum3.html'),(6,1,3,'/students/critiq/critiq/draft/uploaded/sid3cnum1.html'),(7,1,4,'/students/critiq/critiq/draft/uploaded/sid4cnum1.html'),(8,2,4,'/students/critiq/critiq/draft/uploaded/sid4cnum2.html'),(9,1,5,'/students/critiq/critiq/draft/uploaded/sid5cnum1.html'),(10,1,6,'/students/critiq/critiq/alpha/uploaded/sid6cnum1.html');
/*!40000 ALTER TABLE `chapters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `history`
--

DROP TABLE IF EXISTS `history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `history` (
  `uid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  `visited` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`uid`,`sid`,`visited`),
  KEY `sid` (`sid`),
  CONSTRAINT `history_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `history_ibfk_2` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `history`
--

LOCK TABLES `history` WRITE;
/*!40000 ALTER TABLE `history` DISABLE KEYS */;
/*!40000 ALTER TABLE `history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `prefs`
--

DROP TABLE IF EXISTS `prefs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `prefs` (
  `uid` int(11) NOT NULL,
  `tid` int(11) NOT NULL,
  PRIMARY KEY (`uid`,`tid`),
  KEY `tid` (`tid`),
  CONSTRAINT `prefs_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `prefs_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `tags` (`tid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `prefs`
--

LOCK TABLES `prefs` WRITE;
/*!40000 ALTER TABLE `prefs` DISABLE KEYS */;
INSERT INTO `prefs` VALUES (1,1),(1,2),(1,4),(1,10),(2,1),(2,2),(2,6),(2,7),(2,8),(2,9),(2,10),(5,2),(5,3),(5,5),(5,8);
/*!40000 ALTER TABLE `prefs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ratings`
--

DROP TABLE IF EXISTS `ratings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ratings` (
  `uid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  `rating` int(11) NOT NULL,
  PRIMARY KEY (`uid`,`sid`),
  KEY `sid` (`sid`),
  CONSTRAINT `ratings_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `ratings_ibfk_2` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ratings`
--

LOCK TABLES `ratings` WRITE;
/*!40000 ALTER TABLE `ratings` DISABLE KEYS */;
INSERT INTO `ratings` VALUES (1,6,2),(8,6,3);
/*!40000 ALTER TABLE `ratings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviewCredits`
--

DROP TABLE IF EXISTS `reviewCredits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviewCredits` (
  `rid` int(11) NOT NULL,
  `cid` int(11) NOT NULL,
  PRIMARY KEY (`rid`,`cid`),
  KEY `cid` (`cid`),
  CONSTRAINT `reviewCredits_ibfk_1` FOREIGN KEY (`rid`) REFERENCES `reviews` (`rid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `reviewCredits_ibfk_2` FOREIGN KEY (`cid`) REFERENCES `chapters` (`cid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviewCredits`
--

LOCK TABLES `reviewCredits` WRITE;
/*!40000 ALTER TABLE `reviewCredits` DISABLE KEYS */;
INSERT INTO `reviewCredits` VALUES (1,1),(2,4),(3,2),(4,6),(5,1),(6,1),(7,1),(9,9),(10,1),(11,8);
/*!40000 ALTER TABLE `reviewCredits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviews`
--

DROP TABLE IF EXISTS `reviews`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviews` (
  `rid` int(11) NOT NULL AUTO_INCREMENT,
  `commenter` int(11) NOT NULL,
  `ishelpful` int(11) DEFAULT NULL,
  `reviewText` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`rid`),
  KEY `commenter` (`commenter`),
  CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`commenter`) REFERENCES `users` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviews`
--

LOCK TABLES `reviews` WRITE;
/*!40000 ALTER TABLE `reviews` DISABLE KEYS */;
INSERT INTO `reviews` VALUES (1,1,NULL,'wow, great story!'),(2,2,NULL,'as a recent teen i feel personally attacked by this content'),(3,2,NULL,'i can comment on my own work and i love it thank you for quality content\r\n'),(4,2,NULL,'this is incredibly insightful and i look forward to witnessing more of your work'),(5,1,NULL,'test 2'),(6,1,NULL,'teset 3'),(7,1,NULL,'4'),(8,1,NULL,'mysql test'),(9,7,NULL,'Need to flesh this out more'),(10,7,NULL,'Too gross for me!'),(11,1,NULL,'boop!');
/*!40000 ALTER TABLE `reviews` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taglink`
--

DROP TABLE IF EXISTS `taglink`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taglink` (
  `tid` int(11) NOT NULL,
  `sid` int(11) NOT NULL,
  KEY `sid` (`sid`),
  KEY `tid` (`tid`),
  CONSTRAINT `taglink_ibfk_1` FOREIGN KEY (`sid`) REFERENCES `works` (`sid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `taglink_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `tags` (`tid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taglink`
--

LOCK TABLES `taglink` WRITE;
/*!40000 ALTER TABLE `taglink` DISABLE KEYS */;
INSERT INTO `taglink` VALUES (2,1),(4,1),(15,1),(16,1),(1,1),(2,1),(3,1),(3,1),(1,2),(2,2),(5,2),(6,2),(7,2),(10,2),(17,2),(18,2),(23,2),(26,2),(27,2),(29,2),(31,2),(1,2),(3,2),(3,2),(2,2),(1,3),(7,3),(10,3),(18,3),(1,3),(4,3),(3,3),(2,3),(10,4),(1,4),(2,4),(3,4),(3,4),(5,5),(31,5),(1,5),(2,5),(3,5),(3,5),(1,6),(2,6),(3,6),(2,6);
/*!40000 ALTER TABLE `taglink` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `ttype` varchar(20) NOT NULL,
  `tname` varchar(50) NOT NULL,
  PRIMARY KEY (`tid`),
  UNIQUE KEY `tname` (`tname`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'genre','Romance'),(2,'genre','Fantasy'),(3,'genre','Horror'),(4,'genre','Sci-Fi'),(5,'genre','Historical'),(6,'genre','Mystery'),(7,'genre','Humor'),(8,'genre','Literary'),(9,'genre','Thriller'),(10,'genre','Suspense'),(11,'genre','Poetry'),(12,'audience','General'),(13,'audience','Young Adult'),(14,'audience','18+'),(15,'warnings','Violence'),(16,'warnings','Gore'),(17,'warnings','Rape or Sexual Assault'),(18,'warnings','Sexual Content'),(19,'warnings','Racism'),(20,'warnings','Homophobia'),(21,'warnings','Suicidal Content'),(22,'warnings','Abuse'),(23,'warnings','Animal Cruelty'),(24,'warnings','Self-Harm'),(25,'warnings','Eating Disorder'),(26,'warnings','Incest'),(27,'warnings','Child Abuse or Pedophilia'),(28,'warnings','Death or Dying'),(29,'warnings','Pregnancy or Childbirth'),(30,'warnings','Miscarriages orAbortion'),(31,'warnings','Mental Illness'),(32,'isFin','Finished'),(33,'isFin','Work in Progress');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `uid` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) DEFAULT NULL,
  `passhash` char(60) DEFAULT NULL,
  `commentscore` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `username` (`username`),
  KEY `username_2` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'e','$2b$12$Ur/GY6v/v831mJdBD8o9bOFI5tCTNUwzLliJxHikkqaZBjZPN/c5a',NULL),(2,'sbussey','$2b$12$w53pirC8UMbHSPY9q37.HeOTpa3rB3MtGhasEPV6OH7RbtSdmnEDe',NULL),(3,'scott','$2b$12$X.xsPPzIRyjjTiUK6/qBHOtSfZwIySFynNsbYhP8e7QW6W2cAeuli',NULL),(4,'claire','$2b$12$y9sVbK.WTrAaE6czj756fuu6hsQR5efMZk9q1f1U.sZf5NI7aqeUa',NULL),(5,'sophia','$2b$12$yku/OWhnAgi85/jG7HCY5eNDT6k/uGS5jzxduwpWd3vbVqWv1yYD6',NULL),(7,'ross','$2b$12$zMd2OQ6s/1LoFUs74BPRmeB.URVlgg/pIdDd9ZJBHnVxSC4s7tR5.',NULL),(8,'f','$2b$12$ASbX02.jyDZyJJOSoVVfMesTjo.JU3xCCDtJXV8vrNa6Aiyai3NuW',NULL),(9,'g','$2b$12$RiiwqHO/qwUG7mNRA.5NZed4FCXoIWdS5Wy2.VFclSg9Avtd.Y8eS',NULL),(10,'h','$2b$12$bziG6sIOllwWG4vYLjWJqu.9f/lI/WDKA20zuQrvnctzWXbxzeHle',NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `works`
--

DROP TABLE IF EXISTS `works`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `works` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NOT NULL,
  `title` varchar(200) DEFAULT NULL,
  `updated` date DEFAULT NULL,
  `summary` varchar(2000) DEFAULT NULL,
  `stars` float DEFAULT NULL,
  `wip` tinyint(1) DEFAULT '0',
  `avgRating` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`sid`),
  KEY `uid` (`uid`),
  CONSTRAINT `works_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `works`
--

LOCK TABLES `works` WRITE;
/*!40000 ALTER TABLE `works` DISABLE KEYS */;
INSERT INTO `works` VALUES (1,1,'Claire test 1',NULL,'wee!',NULL,0,NULL),(2,2,'test it ',NULL,'ahhhhh',NULL,0,NULL),(3,1,'whoop!',NULL,'be bop de doop',NULL,0,NULL),(4,4,'Claire\'s Big Adventure',NULL,'Claire walks a dog.',NULL,0,NULL),(5,7,'how I went to college',NULL,'did some art, showed it to a person for feedback, and he accepted my portfolio!',NULL,0,NULL),(6,9,'finished',NULL,'dfg',NULL,1,3);
/*!40000 ALTER TABLE `works` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-10 15:20:48

====================== insertData.sql =====================


-- genre ('Romance','Fantasy','Horror','Sci-Fi','Historical','Mystery','Humor','Literary', 
--             'Thriller','Suspense','Poetry'), 
-- audience ('General','Young Adult','18+'),
-- warnings ('Violence','Gore','Rape/Sexual Assault','Sexual Content','Racism','Homophobia',
--             'Suicidal Content','Abuse', 'Animal Cruelty', 'Self-Harm', 'Eating Disorder',
--             'Incest','Child Abuse/Pedophilia', 'Death/Dying','Pregnancy/Childbirth',
--             'Miscarriages/Abortion','Mental Illness'),
-- isFin, 

insert into tags values (null, 'genre', 'Romance'), (null, 'genre', 'Fantasy'), 
    (null, 'genre', 'Horror'), (null, 'genre', 'Sci-Fi'), (null, 'genre', 'Historical'),
    (null, 'genre', 'Mystery'), (null, 'genre', 'Humor'), (null, 'genre', 'Literary'),
    (null, 'genre', 'Thriller'), (null, 'genre', 'Suspense'), (null, 'genre', 'Poetry');

insert into tags values (null, 'audience', 'General'), (null, 'audience', 'Young Adult'),
    (null, 'audience', '18+');

insert into tags values (null, 'warnings', 'Violence'), (null, 'warnings', 'Gore'), 
    (null, 'warnings', 'Rape or Sexual Assault'), (null, 'warnings', 'Sexual Content'),  
    (null, 'warnings', 'Racism'), (null, 'warnings', 'Homophobia'), 
    (null, 'warnings', 'Suicidal Content'), (null, 'warnings', 'Abuse'), 
    (null, 'warnings', 'Animal Cruelty'), (null, 'warnings', 'Self-Harm'),
    (null, 'warnings', 'Eating Disorder'), (null, 'warnings', 'Incest'),
    (null, 'warnings', 'Child Abuse or Pedophilia'), (null, 'warnings', 'Death or Dying'),
    (null, 'warnings', 'Pregnancy or Childbirth'),(null, 'warnings', 'Miscarriages orAbortion'),
    (null, 'warnings', 'Mental Illness');

insert into tags values (null, 'isFin', 'Finished'), (null, 'isFin', 'Work in Progress');


====================== templates/404.html =====================
{% extends 'base.html' %}

{% block content %}

<p>Sorry, it looks like that page doesn't exist.</p>
{% endblock %}
====================== templates/add.html =====================
{% extends 'base.html' %}

{% block content %}

<form action="" method="POST">
    <label>Title: <input type="text" name="title"></label> <br>
    <label>Summary: <textarea name="summary"></textarea></label> <br>
    <label>Genres:
        {% for g in genre %}
            <label> {{ g['tname'] }}
                <input type="checkbox" name="genre" value="{{ g['tid'] }}">
            </label> <br>
        {% endfor %}
    </label> <br>
    <label>Audience:
        {% for a in audience %}
            <label> {{ a['tname'] }}
                <input type="radio" name="audience" value="{{ a['tid'] }}">
            </label> <br>
        {% endfor %}
    </label> <br>
    <label>Warnings:
        {% for w in warnings %}
        <label> {{ w['tname'] }}
            <input type="checkbox" name="warnings" value="{{ w['tid'] }}">
        </label> <br>
        {% endfor %}
    </label> <br>
    <label>Status:
        {% for i in isFin %}
        <label> {{ i['tname'] }}
            <input type="radio" name="isFin" value="{{ i['tid'] }}">
        </label> <br>
        {% endfor %}
    </label> <br>
    <input type="submit" value="submit">
</form>

{% endblock %}
====================== templates/base.html =====================
<!doctype html>
<html lang='en'>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Claire Cannatti and Sophia Bussey and Svetha Pulavarty">
    <meta name="description" content="A site for posting and critiquing creative writing.">
    <!-- <meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'self'; connect-src 'self' blob:; img-src 'self' data: blob:; style-src 'self' 'unsafe-inline'; font-src 'self';" > -->

    <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{url_for('static', filename = 'style.css')}}">
    <link rel="icon" href="{{url_for('static', filename = 'images/critiq_icon.png')}}">
    <title>{{page_title}}</title>
    {% block head_stuff %} {% endblock %}
</head>
<body>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>

        <nav class="navbar navbar-expand-lg navbar-light bg-light">
          <a class="navbar-brand" href="#" > </a>
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" >
            <span class="navbar-toggler-icon"></span>
          </button>
    
          <div class="collapse navbar-collapse" id="navbarSupportedContent"> 
            <ul class="navbar-nav mr-auto">
              <li class="nav-item active">
                <a class="nav-link" href="{{url_for('index')}}"><img src="{{url_for('static', filename = 'images/critiq_logo_half_green.png')}}" height="50" alt="critiq logo link to home page"><span class="sr-only">(current)</span></a>
              </li>
              <li class="nav-item nonlogo">
                <form id="search-form" method="POST" action="{{url_for('index')}}" class="form-inline my-2 my-lg-0">
		              <!-- <fieldset> -->
                <div class="inline"><label id="searchlabel">
                    Search For: 
                    <div class="inline"><input id="term" name="search_term" value="" class="form-control"></div>
                  </label></div>
                  <div class="inline"><label id="selTag">
                    Select Desired Tag: 
                    <div class="inline"><select id="select_tag" name="select_tag" class="form-control">
                      <option value="">Select a Tag</option>
                    </select></div>
                  </label></div>
                  <div class="inline"><label>
                      <div class="inline"><input required type="radio" name="search_kind" value="work">
                      Title</div>
                  </label></div>
                  <div class="inline"><label>
                      <div class="inline"><input required type="radio" name="search_kind" value="author">
                      Author </div>
                  </label></div>
                  <div id="formtag" class="inline"><label>
                      <div class="inline"><input required type="radio" name="search_kind" value="tag">
                    Tag </div>
                  </label></div>
                  <!-- </fieldset> -->
                 
                  <div><input type="submit" name="submit-btn" value=" Search" class="btn btn-secondary"></div>
                </form>
              </li>
              {% if 'uid' in session %}
                <li class="nav-item dropdown nonlogo">
                  <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Profile</a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                      
                      <a class="dropdown-item" href="{{url_for('profile', username=session['username'])}}">My Profile</a>
                      <a class="dropdown-item" href="{{url_for('history')}}">My History</a>
                      <a class="dropdown-item" href="{{url_for('manage')}}">Manage My Stories</a>
                      <!-- <a class="dropdown-item" href="{{url_for('bookmarks')}}">My Bookmarks</a> -->
                      <a class="dropdown-item" href="{{url_for('recommendations')}}">My Recommendations</a>
                      <a class="dropdown-item" href="{{url_for('logout')}}">Log out</a>
                      
                    </div>
                  </li>
                {% endif %}
            </ul>
          </div>
    
        </nav>
<!-- >>>>>>> 16cc9ff9edeb0d92834985b7e8eff2a1863156ba -->
{% with messages = get_flashed_messages() %}
    {% if messages %}
        <div id="messages">
        {% for msg in messages %}
            <p>{{msg}}</p>
        {% endfor %}
        </div>
    {% endif %}
{% endwith %}
        
<div class="row">
  <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1 col-xs-1"></div>

  <div class="col-xl-8 col-lg-8 col-md-10 col-sm-10 col-xs-10">
    {% block content %}
    <h1>Welcome!</h1>
    {% endblock %}
    

  </div>

  <div class="col-xl-2 col-lg-2 col-md-1 col-sm-1 col-xs-1"></div>
</div>


<script>
//if javascript enabled, allow search by tag
$("div#formtag").show();

var URL = "{{url_for('getTags')}}"

$("input[value='tag']").on("click", function (event) {
    $.ajax({
        type: "POST",
        url: URL, 
        data: JSON.stringify({'tags': {}}), 
        contentType: 'application/json; charset=UTF-8',   
        success: get_tags
    });

  //for later versions
  // if ($("#select_tag option").length <= 1) {
  //   console.log($("#select_tag option").length)
  //   $.post(URL, {'tags': {}}, get_tags)
  // }
});

function get_tags(obj) {
  var tags = Object.values(obj['tags']);
  for (var tag of tags) {
        $("select#select_tag").append(new Option(tag['tname'], tag['tname']));
  }
}

$("input[value='tag']").on("click", function (event) {
        $(this).closest("form")
               .find("label#searchlabel").hide()
        $(this).closest("form")
               .find("label#selTag").show()  
})
$("input[value='work']").on("click", function (event) {
        $(this).closest("form")
               .find("label#selTag").hide()
        $(this).closest("form")
               .find("label#searchlabel").show()         
})
$("input[value='author']").on("click", function (event) {
        $(this).closest("form")
               .find("label#selTag").hide()
        $(this).closest("form")
               .find("label#searchlabel").show()         
})
</script>
</body>
</html>




====================== templates/edit-profile.html =====================
{% extends "base.html" %}
{% block content %}
<h2>Help us find stories that you will enjoy!</h2> 

<form id="prefs" method="POST" action="{{url_for('profile', uid=uid)}}">
<label id="tags">I Like Stories About...
    {% for tag in prefs %}
    <br>
    <input type="checkbox" name="pref[]" value="{{tag['tid']}}" checked> {{tag['tname']}}</input>
    {% endfor %}
    {% for tag in allTags %}
    <br>
    <input type="checkbox" name="pref[]" value="{{tag['tid']}}" > {{tag['tname']}}</input>
    {% endfor %}
</label>
<input type="submit" name="submit-btn" value="done">
</form>

{% endblock %}

====================== templates/history.html =====================
{%extends "base.html" %}

{% block content %}
<div id="history">
    <table id="history-list" class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th># of Chapters </th>
            <th>Finished? </th>
            <th>Visited</th>
        </tr>
    </thead>
    {%for work in history %}
        {% if work and work['sid'] %}   
        <tr work-sid="{{work['sid']}}">
            <td class="title"><a href="{{url_for('read', sid=work.sid)}}">{{work['title']}}</a></td>
            <td class="author"><a href="{{url_for('profile', username=work['username'])}}">{{work['username']}}</a></td>
            <td class="chapter-cnt">{{work['count(sid)']}}</td>
            <td class="updated">
                {% if work['wip'] == 0 %}
                No
                {% else %}
                Yes
                {% endif %}
            </td>
            <td class="visited">{{work['visited']}}</td>
        </tr> 
        {% else %}
        <tr><td>No results found</td></tr>
        {% endif %} 
    {% endfor %}
{% endblock %}
====================== templates/main.html =====================
{% extends "base.html" %}

{% block content %}
<h1>Welcome to My App</h1>

<p>Please login or join, using one of the forms below:</p>

<p>BTW, here's a string you might use: Göthe

<form id="joinform" action="{{url_for('join')}}" method="post">
    <h2>Join</h2>
    <p><label>Username: <input class="form-control" type="text" name="username" required pattern="^\w+$"></label></p>
    <p><label>Password: <input class="form-control" type="password" name="password1" required></label></p>
    <p><label>Password again: <input class="form-control" type="password" name="password2" required></label></p>
    <p><button class="btn btn-info" type="submit">Submit</button></p>
</form>
    
<form id="loginform" action="{{url_for('login')}}" method="post">
    <h2>Login</h2>
    <p><label>Username: <input class="form-control" type="text" name="username" required pattern="^\w+$"></label></p>
    <p><label>Password: <input class="form-control" type="password" name="password" required></label></p>
    <p><button class="btn btn-info" type="submit">Submit</button></p>
</form>

<p>A note: we do not allow you to define your own tags. <a href="https://drive.google.com/open?id=0B8amoo6LI4r-LWhYRlo2NXhOV3c">This is why.</a></a></p>

{% endblock %}

====================== templates/manage.html =====================
{% extends 'base.html' %}

{% block content %}

<a href= "{{ url_for('add') }}"><button class="btn btn-info">Add a story!</button></a>
<br> <br>
{% if stories %}

    {% for story in stories %}
    <div class="managestory">
        <a href= "{{ url_for('update', sid=story['sid']) }}">
            <p>Title: {{ story['title'] }} </p>
            <p>Summary: {{ story['summary'] }} </p>
            <p>Genre: {{ story['genre'] }} </p>
            <p>Audience: {{ story['audience'] }} </p>
            <p>Warnings: {{ story['warnings'] }} </p>
            <p>Stars: {{ story['stars'] }} </p>
        </a>
    </div>  
    <br>  
    {% endfor %}

{% endif %}

{% endblock %}
====================== templates/profile.html =====================
{% extends "base.html" %}

{% block content %}

<h1>{{username}}'s Profile</h1>

{% if currentUsername == username %}
<br>
<h5>Help us find stories that you will enjoy!</h5> 

<div id=prefsBox>
    <form id="prefs" method="POST" action="{{url_for('profile', username=username)}}">
    <label id="tags"><h6>I Like Stories About...</h6>

        {% for tag in prefs %}
        <input type="checkbox" name="pref[]" value="{{tag['tid']}}" checked> {{tag['tname']}}</input>
        <br>
        {% endfor %}
        {% for tag in allTags %}
        <input type="checkbox" name="pref[]" value="{{tag['tid']}}" > {{tag['tname']}}</input>
        <br>
        {% endfor %}
    </label>
    <br>
    <input type="submit" name="submit-btn" value="Submit Changes" class="btn btn-secondary">
    </form>
</div>
<br><br>
<h5>Stories you've posted:</h5>
{% else %}
<h5>Stories by this user:</h5>
{% endif %}

{% for story in stories %}
<div class=story>
    <h5><a href="{{url_for('read', sid=story.sid)}}">{{story.title}}</a></h5>
    <p>{{story.summary}}</p>
</div>
<br>
{% endfor %}
<!-- 
<div class="prefs">
    <a href="{{url_for('prefs', uid=uid)}}"> 
        <button>My Preferences</button>    
    </a>
</div> -->


{% endblock %}
====================== templates/read.html =====================
{% extends 'base.html' %}

{% block content %}

<h1>{{title}}</h1>
<h4>Chapter {{cnum}}</h4>
<h5>By <a href="{{url_for('profile', username=author)}}">{{author}}</a></h5>

<form method="POST" action="{{url_for('chapIndex')}}" class="form-inline">
    <input value={{sid}} name="sid" type=hidden>
    <div class="inline"><label for="cid">Chapter Index</label></div>
    <div class="inline"><select class="form-control" id="cid" name="cid">
        {% for i in allch %}
            <option value="{{i['cnum']}}">Chapter {{i['cnum']}}</option>
        {% endfor %}
    </select></div>
    <div class="inline"><input type=submit value="Submit" class="btn btn-secondary"></div>
</form>

<br><br>
<div class="unselectable story">
    {{ story|safe }}
</div>

<br>
<div id=nextprev>
    {% if cnum > 1 %}
    <a href="{{url_for('read', sid=sid, cnum=cnum-1)}}"><button class="btn btn-secondary">&#8592; Previous Chapter</button></a>
    {% endif %}
    
    {% if cnum < maxCh %}
    <a href="{{url_for('read', sid=sid, cnum=cnum+1)}}"><button class="btn btn-secondary">Next Chapter &#8594;</button></a>
    {% endif %}
</div>
<!-- Need to include a Next Chapter Button -->

<br><br>
<div id=existingComments>
    {% if comments %}
    <h5>Comments you've left on this chapter:</h5>
    <br>
    {% else %}
    <h5>You haven't left any comments on this chapter yet.</h5>
    {% endif %}
    {% for comment in comments %}
        <div class=comment>
            <p>{{ comment.reviewText }}</p>
        </div>
        <br>
    {% endfor %}
</div>

<!-- want to reflect previous ratings on page load, probably a beta feature -->
{% if chapter.wip %}
    <form id="rateForm" method = "POST" action="{{url_for('rateAjax')}}">  
        <input class="rateSid" value={{sid}} name="sid" type=hidden>
        <input class="rateUid" value={{uid}} name="sid" type=hidden>

        <label id="rate1" class="rating"><div class=labelInput> &#9734;</div>
            <input class="ratingInput" type="radio" value=1 name="rating"> </label>
        <label id="rate2" class="rating"><div class=labelInput> &#9734;</div> 
            <input class="ratingInput" type="radio" value=2 name="rating"> </label>
        <label id="rate3" class="rating"><div class=labelInput> &#9734;</div>
            <input class="ratingInput" type="radio" value=3 name="rating"> </label>
        <label id="rate4" class="rating"><div class=labelInput> &#9734;</div>
            <input class="ratingInput" type="radio" value=4 name="rating">  </label>
        <label id="rate5" class="rating"><div class=labelInput> &#9734;</div>
            <input class="ratingInput" type="radio" value=5 name="rating"> </label>
        <!-- <input class="rate-button" type="submit" value="rate this"></input> -->

    <p id="avgCol"></p>
    </form>
{% endif %}

    <form id="commentForm" action="{{url_for('addComment')}}" method="POST">
        <label>Add a comment on this chapter</label>
            <textarea name="commentText" rows="8" class="form-control"></textarea>
            <br>
            <input value={{chapter.cid}} id="cid" name="cid" type=hidden>
            <input id="commentSubmit" type="submit" class="btn btn-info" value="Comment">
    </form>

    <p id="commentConfirmation">Comment submitted!</p>


<script>
    $("#commentConfirmation").hide()
    $("#avgCol").hide()
    $("input[type=radio].ratingInput").hide()
    var progressive_on = true;
    var RATEURL = "{{url_for('rateAjax')}}"    

    // $("input:radio.ratingInput").click(function() { 
    $("#rateForm").on("click", "input:radio.ratingInput", function(event) {
        // $(".rating").html(" &#9734;")
        console.log('adding rating with Ajax')
        //turn on ajax
        if (progressive_on) {
            rate = $(this).val();
            console.log(rate);
            // $(this).closest("form").find("#rate" + rate).text(" &#9733;");
            // console.log('looping')
            for (i = 1; i <= rate; i++) {
                // console.log(i)
                $("#rateForm").find("#rate" + i).find(".labelInput").html(' &#9733;');
            };
            // console.log('looping 2')
            for (i = 5; i > rate; i--) {
                // console.log(i)
                $("#rateForm").find("#rate" + i).find(".labelInput").html(' &#9734;');
            };
            // console.log('done looping')
            $("input:radio.ratingInput").hide()

            //update avg rating
            var sid = $(this).closest("form").find(".rateSid").val()
            var uid = $(this).closest("form").find(".rateUid").val()
            $.post(RATEURL, {'rating': rate,
                        'sid': sid,
                        'uid': uid}, showAvgRating)
            
        }
    });

    function showAvgRating(obj) {
        console.log(obj)
        $('#avgCol').text('Average rating: ' + obj.avgRating + '/5')
        $('#avgCol').show()
    }


</script>

<noscript>
    <p>Your browser doesn't support JavaScript.</p>
</noscript>

{% endblock %}
====================== templates/recommendations.html =====================
{% extends "base.html" %}

{% block content %}

<h1>Recommendations</h1>

{% for rec in recommendations %}
<div class="rec">
    <h4><a href="/work/{{rec.sid}}">Title: {{rec.title}}</a></h4>
    <p>Author: {{rec.author}}</p>
    <p>{{rec.rating}}/5.0</p>
    <p>Tags: 
        {%for tag in rec.tags %}
            <div class="tag">{{tag}}</div>
        {% endfor %}
    </p>
    <p>Summary: {{rec.summary}}</p>
</div>
{% endfor %}

{% endblock %}
====================== templates/search.html =====================
{%extends "base.html" %}

{% block content %}
<!-- <div id="featured-movie">
    <h3>Featured Movie: #<span id='tt'></span></h3>
    <h4>Title: <span id='title'></span> Directed By: <span id='director'></span> 
        Release: <span id='release'></span></h4>
</div> -->
<div id="results">
        {% if resKind=="Recs" %}
        <h1>Recommendations:</h1>
        {% else %}
        <h1>Search results for {{resKind}}: '{{term}}' </h1> 
        {% endif %}
        <br>
        <table id="res-list" class="table">
            <thead>
            <tr>
	      {% if (resKind=="Works") or (resKind=="Recs") %}
                <th>Title</th>
                <th>Author</th>
                <th># of Chapters</th>
                <!-- <th>Finished? </th> -->
	      {% else %}
		<th>Author Username</th>
	      {% endif %}
            </tr>
        </thead>
        {%for result in res %}
        {% if (resKind=="Works") or (resKind=="Recs") %}
            {% if result and result['sid'] %}   
            <tr work-sid="{{result['sid']}}">
                <td class="title"><a href="{{url_for('read', sid=result.sid)}}">{{result['title']}}</a></td>
                <td class="author"><a href="{{url_for('profile', username=result['username'])}}">{{result['username']}}</a></td>
                <td class="chapter-cnt">{{result['count(sid)']}}</td>
                <!-- <td class="updated">
                    {% if result['wip'] %}
                    Yes
                    {% else %}
                    No
                    {% endif %}
                </td> -->
            </tr> 
            {% else %}
            <tr><td>No results found</td></tr>
            {% endif %} 
	    {% else %}
	        <tr uid="{{result['uid']}}">
	            <td class="uname"><a href="{{ url_for('profile', username=result['username']) }}">{{result['username']}}</a></td>
	        </tr>
        {% endif %}
        
        {%endfor%}
	    

        </table>

</div>
<br><br>

{% if warnings %}
<div id="filters" class="story">
    <h4>Don't show me works involving:</h4>
    <form id="filter-frm" method="POST" action="{{request.url}}">
        {% for warning in warnings %}
        <br>
        <input type="checkbox" name="warnings[]" value="{{warning['tid']}}"> {{warning['tname']}}</input>
        {% endfor %}
        <br><br>
        <input type="submit" name="submit-btn" value="Exclude" class="btn btn-secondary">
    </form>
</div>
{% endif %}

{%endblock%}

====================== templates/work.html =====================

====================== templates/write.html =====================
{% extends 'base.html' %}

{% block content %}
<body>

    {% for i in allch %}
        <p><a href="{{url_for('update', sid=i['sid'], cnum=i['cnum'])}}">Edit chapter {{i['cnum']}}</a></p>
        {% if loop.last %}
            <a href="{{url_for('update', sid=i['sid'], cnum=(i['cnum']+1))}}"><button class="btn btn-info">Add Chapter {{i['cnum']+1}}</button></a></li>
        {% endif %}
    {% endfor %}
    <br><br>
            
    <form action="" method="POST">

        <label>Write Your Story
            <textarea id="tinytext" name="write"></textarea></label>
        <input type="submit" name="submit" value="submit">
    </form>
    <br>
    

    <script>
        story = `{{story|safe}}`
    </script>

    <script src="{{ url_for('static', filename='tinyeditor.js') }}" defer></script>

</body>
{% endblock %}

====================== static/tinyeditor.js =====================
tinymce.init({
    selector:'#tinytext',
    plugins: ['wordcount hr spellchecker lists'],
    toolbar: ['undo redo | bold italic underline strikethrough | alignleft aligncenter alignright | bullist numlist | blockquote hr indent outdent | removeformat'],
    menubar: false, //sorry scott that line above needs to be long
    width: 700, //px
    height: 600,
    element_format: 'html',
    init_instance_callback: function(editor) {
        var freeTiny = document.querySelector('.tox .tox-notification--in');
        freeTiny.style.display = 'none';
        editor.setContent(story);
        console.log(story);
    }
});
====================== static/style.css =====================
#messages {
    color: green;
    font-style: italic;
}

h1 {
    font-size: 200%;
    color: rgb(0, 65, 0);
}

.row {
    padding-top: 5%;
}

.unselectable {
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

#selTag {
    display: none;
}

#formtag {
    display: none;
}

.search_term {
    visibility: visible;
}

.comment {
    background-color: #EEEEEE;
    padding: 10px;
    border-radius: 5px;
}

.story {
    border-style: solid;
    border-color: #EEEEEE;
    border-width: 2px;
    padding: 10px;
}

a {
    color: green;
}

a:hover {
    color: rgb(0, 65, 0);
}
#prefsBox {
    background-color: #EEEEEE;
    padding: 10px;
}

.managestory {
    background-color: #EEEEEE;
    padding: 10px;
}

#tags {

}

.btn-secondary {
    background-color: #888888;
    border-color: #888888;
}

.btn-secondary:hover {
    background-color: #555555
}

.nav-item input {
    padding-left: 5px;
}

.btn-info {
    background-color: green;
    border-color: green;
}

.btn-info:hover {
    background-color: rgb(0, 65, 0);
}

.inline {
    padding-right: 5px;
}

#nextprev {
    margin: auto;
}

.nonlogo {
    padding-top: 10px;
}
